// ===================================================
// üìÅ Archivo: test-cotizacion-extensions.js
// üìå Ubicaci√≥n: /
// üîß Descripci√≥n: Script de prueba para las nuevas extensiones de cotizaci√≥n
// ‚úÖ Prueba APIs de exclusiones, condiciones y tiempos de entrega
// ===================================================

const BASE_URL = 'http://localhost:3000'

async function testCotizacionExtensions() {
  console.log('üß™ Iniciando pruebas de extensiones de cotizaci√≥n...\n')

  try {
    // 1. Obtener una cotizaci√≥n existente para pruebas
    console.log('1Ô∏è‚É£ Obteniendo cotizaci√≥n de prueba...')
    const cotizacionesResponse = await fetch(`${BASE_URL}/api/cotizaciones`)
    const cotizaciones = await cotizacionesResponse.json()

    if (!cotizaciones.data || cotizaciones.data.length === 0) {
      console.log('‚ùå No hay cotizaciones disponibles para pruebas')
      return
    }

    const cotizacionId = cotizaciones.data[0].id
    console.log(`‚úÖ Usando cotizaci√≥n: ${cotizacionId}\n`)

    // 2. Probar API de exclusiones
    console.log('2Ô∏è‚É£ Probando API de exclusiones...')

    // Crear exclusi√≥n
    const exclusionData = {
      descripcion: 'Prueba de exclusi√≥n autom√°tica',
      orden: 1
    }

    const createExclusionResponse = await fetch(`${BASE_URL}/api/cotizacion/${cotizacionId}/exclusiones`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(exclusionData)
    })

    if (createExclusionResponse.ok) {
      const nuevaExclusion = await createExclusionResponse.json()
      console.log('‚úÖ Exclusi√≥n creada:', nuevaExclusion.data.descripcion)

      // Obtener exclusiones
      const getExclusionsResponse = await fetch(`${BASE_URL}/api/cotizacion/${cotizacionId}/exclusiones`)
      const exclusiones = await getExclusionsResponse.json()
      console.log(`‚úÖ Exclusiones obtenidas: ${exclusiones.data.length} items`)
    } else {
      console.log('‚ùå Error creando exclusi√≥n:', createExclusionResponse.status)
    }

    // 3. Probar API de condiciones
    console.log('\n3Ô∏è‚É£ Probando API de condiciones...')

    // Crear condici√≥n
    const condicionData = {
      descripcion: 'Prueba de condici√≥n autom√°tica',
      tipo: 'comercial',
      orden: 1
    }

    const createCondicionResponse = await fetch(`${BASE_URL}/api/cotizacion/${cotizacionId}/condiciones`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(condicionData)
    })

    if (createCondicionResponse.ok) {
      const nuevaCondicion = await createCondicionResponse.json()
      console.log('‚úÖ Condici√≥n creada:', nuevaCondicion.data.descripcion)

      // Obtener condiciones
      const getCondicionesResponse = await fetch(`${BASE_URL}/api/cotizacion/${cotizacionId}/condiciones`)
      const condiciones = await getCondicionesResponse.json()
      console.log(`‚úÖ Condiciones obtenidas: ${condiciones.data.length} items`)
    } else {
      console.log('‚ùå Error creando condici√≥n:', createCondicionResponse.status)
    }

    // 4. Probar actualizaci√≥n de tiempos de entrega
    console.log('\n4Ô∏è‚É£ Probando actualizaci√≥n de tiempos de entrega...')

    // Obtener equipos de la cotizaci√≥n
    const cotizacionResponse = await fetch(`${BASE_URL}/api/cotizacion/${cotizacionId}`)
    const cotizacion = await cotizacionResponse.json()

    if (cotizacion.equipos && cotizacion.equipos.length > 0) {
      const equipoId = cotizacion.equipos[0].id

      const updatePlazoResponse = await fetch(`${BASE_URL}/api/cotizacion/${cotizacionId}/equipos/${equipoId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ plazoEntregaSemanas: 8 })
      })

      if (updatePlazoResponse.ok) {
        console.log('‚úÖ Tiempo de entrega actualizado para equipo')
      } else {
        console.log('‚ùå Error actualizando tiempo de entrega:', updatePlazoResponse.status)
      }
    } else {
      console.log('‚ö†Ô∏è No hay equipos en esta cotizaci√≥n para probar')
    }

    // 5. Verificar que la cotizaci√≥n incluye las nuevas relaciones
    console.log('\n5Ô∏è‚É£ Verificando relaciones en cotizaci√≥n...')
    const cotizacionActualizadaResponse = await fetch(`${BASE_URL}/api/cotizacion/${cotizacionId}`)
    const cotizacionActualizada = await cotizacionActualizadaResponse.json()

    console.log('‚úÖ Relaciones verificadas:')
    console.log(`   - Exclusiones: ${cotizacionActualizada.exclusiones?.length || 0}`)
    console.log(`   - Condiciones: ${cotizacionActualizada.condiciones?.length || 0}`)
    console.log(`   - Cronograma: ${cotizacionActualizada.cronograma?.length || 0}`)

    console.log('\nüéâ Pruebas completadas exitosamente!')

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error.message)
  }
}

// Ejecutar pruebas
testCotizacionExtensions()