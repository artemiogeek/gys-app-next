generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================
// üõ°Ô∏è Autenticaci√≥n y Sesi√≥n
// ============================ 

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String             @unique
  emailVerified      DateTime?
  password           String
  role               String             @default("colaborador")
  image              String?
  accounts           Account[]
  sessions           Session[]
  proyectosComercial Proyecto[]         @relation("ComercialProyecto") // Relaci√≥n inversa con comercial en Proyecto
  proyectosGestor    Proyecto[]         @relation("GestorProyecto") // Relaci√≥n inversa con gestor en Proyecto
  cotizaciones       Cotizacion[] // Relaci√≥n inversa con comercial en Cotizacion
  ProyectoEquipos    ProyectoEquipo[] // Relaci√≥n con ProyectoEquipo
  ProyectoServicios  ProyectoServicio[] // Relaci√≥n con ProyectoServicio
  registrosHoras     RegistroHoras[] // ‚è±Ô∏è Relaci√≥n con horas registradas por el usuario
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================
// üìí Generales
// ============================
model Cliente {
  id           String       @id @default(cuid())
  nombre       String
  ruc          String?
  direccion    String?
  telefono     String?
  correo       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  cotizaciones Cotizacion[]
  proyectos    Proyecto[]
}

model Unidad {
  id        String           @id @default(cuid())
  nombre    String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  equipos   CatalogoEquipo[]
}

model UnidadServicio {
  id                      String                   @id @default(cuid())
  nombre                  String                   @unique // Ej: "Motor", "Plano", "Etiqueta", "Punto", etc.
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  servicios               CatalogoServicio[] // Relaci√≥n con √≠tems de cat√°logo    
  plantillaServicioItems  PlantillaServicioItem[] // Relaci√≥n con √≠tems de plantilla
  cotizacionServicioItems CotizacionServicioItem[] // Relaci√≥n inversa con CotizacionServicioItem
}

model CategoriaEquipo {
  id        String           @id @default(cuid())
  nombre    String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  equipos   CatalogoEquipo[]
}

model CategoriaServicio {
  id        String   @id @default(cuid()) // Identificador √∫nico
  nombre    String   @unique // Nombre de la categor√≠a
  createdAt DateTime @default(now()) // Fecha de creaci√≥n
  updatedAt DateTime @updatedAt // Fecha de √∫ltima actualizaci√≥n

  // Relaciones
  servicios CatalogoServicio[]
}

model Recurso {
  id                      String                   @id @default(cuid())
  nombre                  String                   @unique // Ej: Ingeniero, Dibujante, T√©cnico, etc.
  costoHora               Float // Costo base del recurso
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  servicios               CatalogoServicio[] // Relaci√≥n con √≠tems de cat√°logo
  plantillaServicioItems  PlantillaServicioItem[] // Relaci√≥n inversa con PlantillaServicioItem
  cotizacionServicioItems CotizacionServicioItem[] // Relaci√≥n inversa con CotizacionServicioItem
  registrosHoras          RegistroHoras[] // ‚è±Ô∏è Relaci√≥n con registros de horas hombre
}

// ======================
// üì¶ Cat√°logo de Equipos
// ======================

model CatalogoEquipo {
  id                    String                 @id @default(cuid()) // Identificador √∫nico
  categoriaId           String // FK ‚Üí Categor√≠a (Ej: Equipos de control, Tableros)
  unidadId              String // FK ‚Üí Unidad (Ej: und, m, l)
  codigo                String                 @unique // C√≥digo √∫nico del equipo (Ej: 1756-IF8)
  descripcion           String // Descripci√≥n del equipo
  marca                 String // Marca del proveedor (Ej: Rockwell) 
  precioInterno         Float // üîí Precio negociado interno (confidencial)
  margen                Float // üîí Margen sugerido (Ej: 0.25 para 25%)
  precioVenta           Float // Precio de venta visible al comercial
  estado                String // Estado del equipo: aprobado, pendiente, rechazado
  // Control proyecto real
  precioReal            Float?
  fechaActualizacion    DateTime?
  // Fechas de auditor√≠a
  createdAt             DateTime               @default(now()) // Fecha de creaci√≥n
  updatedAt             DateTime               @updatedAt // Fecha de √∫ltima modificaci√≥n
  // Relaciones
  categoria             CategoriaEquipo        @relation(fields: [categoriaId], references: [id])
  unidad                Unidad                 @relation(fields: [unidadId], references: [id])
  plantillaEquipoItems  PlantillaEquipoItem[] // Relaci√≥n con plantillas
  cotizacionEquipoItems CotizacionEquipoItem[] // Relaci√≥n con cotizaciones
  proyectoEquipoItems   ProyectoEquipoItem[] // Relaci√≥n con proyectos
}

// ========================
// ‚öôÔ∏è Cat√°logo de Servicios
// ========================

model CatalogoServicio {
  id                      String                   @id @default(cuid()) // Identificador √∫nico del √≠tem de cat√°logo
  categoriaId             String // FK ‚Üí Categor√≠a principal (PLC, HMI, ING, etc.)
  unidadServicioId        String // FK ‚Üí Unidad de medida del servicio
  recursoId               String // FK ‚Üí Recurso que ejecuta el servicio
  nombre                  String // Nombre del √≠tem (ej. "Mapeo de IOs")
  descripcion             String // Descripci√≥n funcional y alcance del servicio
  formula                 String // Tipo de c√°lculo: "Proporcional", "Escalonada", "Fijo"
  horaBase                Float? // Horas base (solo para f√≥rmula escalonada)
  horaRepetido            Float? // Horas adicionales por √≠tem repetido (escalonada)
  horaUnidad              Float? // Horas por unidad (f√≥rmula proporcional)
  horaFijo                Float? // Horas fijas (si es f√≥rmula tipo fijo)
  // Auditor√≠a
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  // Relaciones
  categoria               CategoriaServicio        @relation(fields: [categoriaId], references: [id])
  unidadServicio          UnidadServicio           @relation(fields: [unidadServicioId], references: [id])
  recurso                 Recurso                  @relation(fields: [recursoId], references: [id])
  plantillaItems          PlantillaServicioItem[]
  cotizacionServicioItems CotizacionServicioItem[] // Relaci√≥n inversa con CotizacionServicioItem
  proyectoServicioItems   ProyectoServicioItem[] // Relaci√≥n inversa con ProyectoServicioItem
}

// ==================
// üßπ Plantilla
// ==================

model Plantilla {
  id                    String              @id @default(cuid()) // Identificador √∫nico de la plantilla
  nombre                String // Nombre de la plantilla
  estado                String              @default("borrador") // üëà nuevo campo
  // Totales consolidados (servicios + equipos)
  totalEquiposInterno   Float               @default(0) // üîí Costo interno de equipos
  totalEquiposCliente   Float               @default(0) // Precio cliente de equipos
  totalServiciosInterno Float               @default(0) // üîí Costo interno de servicios
  totalServiciosCliente Float               @default(0) // Precio cliente de servicios
  totalGastosInterno    Float               @default(0) // üîí Costo interno de gastos 
  totalGastosCliente    Float               @default(0) // Precio cliente de gastos
  totalInterno          Float               @default(0) // üîí Suma total de costos internos
  totalCliente          Float               @default(0) // Precio total antes de descuento
  descuento             Float               @default(0) // Descuento aplicado
  grandTotal            Float               @default(0) // Total final tras descuento
  // Fechas de auditor√≠a
  createdAt             DateTime            @default(now()) // Fecha de creaci√≥n
  updatedAt             DateTime            @updatedAt // Fecha de √∫ltima modificaci√≥n
  // Relaciones
  equipos               PlantillaEquipo[] // Secciones de equipos
  servicios             PlantillaServicio[] // Secciones de servicios
  gastos                PlantillaGasto[] // Relaci√≥n inversa con PlantillaGasto
  cotizaciones          Cotizacion[] // Cotizaciones basadas en esta plantilla
}

model PlantillaEquipo {
  id              String                @id @default(cuid()) // Identificador √∫nico de la secci√≥n de equipos
  plantillaId     String // Relaci√≥n con la plantilla general
  nombre          String // Nombre de la secci√≥n de equipos
  descripcion     String? // Descripci√≥n opcional de esta secci√≥n
  // Subtotales calculados en base a los √≠tems
  subtotalInterno Float // üîí Suma total de los costos internos de todos los items
  subtotalCliente Float // Suma total de los precios cliente de todos los items
  // Fechas de auditor√≠a
  createdAt       DateTime              @default(now()) // Fecha de creaci√≥n
  updatedAt       DateTime              @updatedAt // Fecha de √∫ltima modificaci√≥n
  // Relaciones
  plantilla       Plantilla             @relation(fields: [plantillaId], references: [id], onDelete: Cascade)
  items           PlantillaEquipoItem[] // Lista de equipos incluidos en esta secci√≥n
}

model PlantillaEquipoItem {
  id                String          @id @default(cuid()) // Identificador √∫nico del √≠tem
  plantillaEquipoId String // Relaci√≥n con la plantilla padre
  catalogoEquipoId  String? // ID del equipo original en el cat√°logo
  // Copia de los datos del cat√°logo al momento de agregarlo a la plantilla
  codigo            String // C√≥digo del equipo (Ej: "1756-IF8")
  descripcion       String // Descripci√≥n t√©cnica
  categoria         String // Ej: "Equipos de control"
  unidad            String // Unidad de medida (Ej: "und", "m", "l")
  marca             String // Marca del proveedor (Ej: "Rockwell")
  precioInterno     Float // üîí Precio negociado interno por unidad
  precioCliente     Float // Precio de venta por unidad al cliente
  // Datos personalizados en la plantilla
  cantidad          Float // Cantidad de unidades requeridas
  costoInterno      Float // üîí Total = cantidad * precioInterno
  costoCliente      Float // Total = cantidad * precioCliente
  // Fechas de auditor√≠a
  createdAt         DateTime        @default(now()) // Fecha de creaci√≥n
  updatedAt         DateTime        @updatedAt // Fecha de √∫ltima modificaci√≥n 
  // Relaciones
  plantillaEquipo   PlantillaEquipo @relation(fields: [plantillaEquipoId], references: [id], onDelete: Cascade)
  catalogoEquipo    CatalogoEquipo? @relation(fields: [catalogoEquipoId], references: [id])
}

model PlantillaServicio {
  id          String  @id @default(cuid()) // Identificador √∫nico de la secci√≥n de servicios
  plantillaId String // FK hacia la plantilla general
  nombre      String // Nombre de esta secci√≥n (ej. "Automatizaci√≥n", "HMI", etc.)
  descripcion String? // Descripci√≥n opcional de esta secci√≥n

  // üìä Subtotales calculados desde los √≠tems
  subtotalInterno Float // Suma de todos los costoInterno de los √≠tems
  subtotalCliente Float // Suma de todos los costoCliente de los √≠tems

  // üïì Auditor√≠a
  createdAt DateTime @default(now()) // Fecha de creaci√≥n
  updatedAt DateTime @updatedAt // √öltima modificaci√≥n

  // üîó Relaciones
  plantilla Plantilla               @relation(fields: [plantillaId], references: [id], onDelete: Cascade)
  items     PlantillaServicioItem[] // Lista de √≠tems de servicio incluidos en esta secci√≥n
}

model PlantillaServicioItem {
  id                   String            @id @default(cuid()) // Identificador √∫nico del √≠tem
  plantillaServicioId  String // Relaci√≥n con la secci√≥n de servicios de la plantilla
  catalogoServicioId   String? // ID opcional del √≠tem original en el cat√°logo (para trazabilidad)
  unidadServicioId     String // FK hacia unidad de medida del servicio
  recursoId            String // FK hacia el recurso t√©cnico que realiza el trabajo
  // üìã Copia exacta del cat√°logo al momento de la creaci√≥n
  nombre               String // Nombre del √≠tem (editable en plantilla)
  descripcion          String // Descripci√≥n funcional del √≠tem
  categoria            String // Ej: "PLC", "HMI"  
  unidadServicioNombre String // Copia textual del nombre de la unidad (ej: "Plano", "Motor")
  recursoNombre        String // Copia textual del nombre del recurso (ej: "Ingeniero")
  formula              String // Tipo de f√≥rmula de c√°lculo: "Proporcional", "Escalonada", o "Fijo"
  horaBase             Float? // Horas base (aplica para f√≥rmula escalonada)
  horaRepetido         Float? // Horas por cada unidad repetida (escalonada)
  horaUnidad           Float? // Horas por unidad (proporcional)
  horaFijo             Float? // Horas fijas (para √≠tems tipo fijo)
  // üßë‚Äçüîß Recurso t√©cnico asociado al √≠tem
  costoHora            Float // Costo por hora del recurso en el momento de la carga
  // üî¢ Datos personalizados y c√°lculo
  cantidad             Int // Cantidad de unidades del servicio (ej. 10 se√±ales)
  horaTotal            Float // Horas totales = f√≥rmula aplicada con cantidad
  factorSeguridad      Float // Factor de seguridad adicional (ej. 1.1)
  margen               Float // Margen aplicado al costo interno (ej. 1.35)
  costoInterno         Float // = horaTotal * costoHora * factorSeguridad
  costoCliente         Float // = costoInterno * margen
  // üïì Auditor√≠a
  createdAt            DateTime          @default(now()) // Fecha de creaci√≥n del √≠tem
  updatedAt            DateTime          @updatedAt // √öltima fecha de modificaci√≥n
  // üîó Relaciones
  plantillaServicio    PlantillaServicio @relation(fields: [plantillaServicioId], references: [id], onDelete: Cascade) // Relaci√≥n con la secci√≥n padre
  catalogoServicio     CatalogoServicio? @relation(fields: [catalogoServicioId], references: [id]) // Relaci√≥n opcional con el cat√°logo original
  recurso              Recurso           @relation(fields: [recursoId], references: [id]) // Recurso t√©cnico (FK)
  unidadServicio       UnidadServicio    @relation(fields: [unidadServicioId], references: [id]) // Unidad de medici√≥n del servicio (FK)
}

model PlantillaGasto {
  id              String               @id @default(cuid()) // Identificador √∫nico de la secci√≥n de gastos
  plantillaId     String // Relaci√≥n con la plantilla general
  nombre          String // Nombre del grupo de gastos (ej. "Trabajo de campo")
  descripcion     String? // Descripci√≥n opcional
  subtotalInterno Float // Suma de los costos internos de todos los √≠tems
  subtotalCliente Float // Suma de los costos cliente de todos los √≠tems
  // üïì Auditor√≠a
  createdAt       DateTime             @default(now()) // Fecha de creaci√≥n
  updatedAt       DateTime             @updatedAt // √öltima modificaci√≥n
  // üîó Relaciones
  plantilla       Plantilla            @relation(fields: [plantillaId], references: [id], onDelete: Cascade)
  items           PlantillaGastoItem[] // Lista de √≠tems detallados de gasto
}

model PlantillaGastoItem {
  id              String         @id @default(cuid()) // Identificador √∫nico del √≠tem de gasto
  gastoId         String // Relaci√≥n con la secci√≥n de gasto
  nombre          String // Nombre del √≠tem (ej. "Hospedaje", "Movilizaci√≥n")
  descripcion     String? // Descripci√≥n adicional opcional
  cantidad        Float // Cantidad de unidades (ej. 3 noches)
  precioUnitario  Float // Precio por unidad (interno)
  factorSeguridad Float          @default(1.0) // Factor de seguridad (ej. 1.1)
  margen          Float          @default(1.0) // Margen para venta al cliente
  costoInterno    Float // = cantidad * precioUnitario * factorSeguridad
  costoCliente    Float // = costoInterno * margen
  // üïì Auditor√≠a
  createdAt       DateTime       @default(now()) // Fecha de creaci√≥n
  updatedAt       DateTime       @updatedAt // √öltima modificaci√≥n
  // üîó Relaciones
  gasto           PlantillaGasto @relation(fields: [gastoId], references: [id], onDelete: Cascade)
}

// ============================
// üí≤ Cotizaci√≥n
// ============================

model Cotizacion {
  id          String  @id @default(cuid()) // Identificador √∫nico de la cotizaci√≥n
  clienteId   String? // Cliente al que se cotiza
  comercialId String? // Usuario que genera la cotizaci√≥n
  plantillaId String? // Plantilla de origen (opcional, solo referencia)

  // Datos base
  nombre                String // Nombre de la cotizaci√≥n
  totalEquiposInterno   Float  @default(0) // üîí Costo interno de equipos
  totalEquiposCliente   Float  @default(0) // Precio al cliente por equipos
  totalServiciosInterno Float  @default(0) // üîí Costo interno de servicios
  totalServiciosCliente Float  @default(0) // Precio al cliente por servicios
  totalGastosInterno    Float  @default(0) // üîí Costo interno de gastos
  totalGastosCliente    Float  @default(0) // Precio al cliente por gastos
  totalInterno          Float  @default(0) // üîí Suma de costos internos
  totalCliente          Float  @default(0) // Suma de precios cliente antes de descuento
  descuento             Float  @default(0) // Descuento aplicado al cliente
  grandTotal            Float  @default(0) // Total final tras descuento

  // Seguimiento tipo CRM (nuevos campos)
  etapa               String    @default("nuevo") // Etapa del ciclo: nuevo, enviado, seguimiento, negociacion, cerrado, perdido
  prioridad           String? // Alta, media, baja (opcional)
  probabilidad        Int? // Probabilidad de cierre (0-100%)
  fechaEnvio          DateTime? // Fecha de env√≠o al cliente
  fechaCierreEstimada DateTime? // Fecha estimada de cierre
  notas               String? // Notas del equipo comercial

  // Estado y auditor√≠a
  estado    String   @default("borrador") // Estado: borrador, enviada, aprobada, rechazada
  createdAt DateTime @default(now()) // Fecha de creaci√≥n
  updatedAt DateTime @updatedAt // Fecha de √∫ltima modificaci√≥n

  // Relaciones
  cliente   Cliente?             @relation(fields: [clienteId], references: [id])
  comercial User?                @relation(fields: [comercialId], references: [id])
  plantilla Plantilla?           @relation(fields: [plantillaId], references: [id])
  equipos   CotizacionEquipo[] // Copia de los datos de la plantilla
  servicios CotizacionServicio[] // Copia de los datos de la plantilla
  gastos    CotizacionGasto[] // Relaci√≥n inversa con CotizacionGasto
  proyectos Proyecto[] // Relaci√≥n con proyectos generados a partir de esta cotizaci√≥n
}

model CotizacionEquipo {
  id              String                 @id @default(cuid()) // Identificador √∫nico
  cotizacionId    String // Relaci√≥n con la cotizaci√≥n
  // Copia de los datos de la plantilla
  nombre          String // Copia del nombre del grupo en plantilla
  descripcion     String? // Copia de la descripci√≥n
  subtotalInterno Float // üîí Copia del subtotal interno
  subtotalCliente Float // Copia del subtotal cliente
  // Datos personalizados en la cotizacion
  // Fechas de auditor√≠a
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  // Relaciones
  cotizacion      Cotizacion             @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  items           CotizacionEquipoItem[] // Copia de los datos de la plantilla
}

model CotizacionEquipoItem {
  id                 String           @id @default(cuid()) // Identificador √∫nico
  cotizacionEquipoId String // Relaci√≥n con la secci√≥n de equipos
  catalogoEquipoId   String? // ID del equipo original en el cat√°logo
  // Copia de los datos de la plantilla
  codigo             String
  descripcion        String
  categoria          String
  unidad             String
  marca              String
  precioInterno      Float // üîí Copia del precio por unidad
  precioCliente      Float
  // Datos personalizados en la cotizacion
  cantidad           Float
  costoInterno       Float // üîí cantidad * precioInterno
  costoCliente       Float // cantidad * precioCliente
  // Fechas de auditor√≠a
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  // Relaciones
  cotizacionEquipo   CotizacionEquipo @relation(fields: [cotizacionEquipoId], references: [id], onDelete: Cascade)
  catalogoEquipo     CatalogoEquipo?  @relation(fields: [catalogoEquipoId], references: [id])
}

model CotizacionServicio {
  id              String                   @id @default(cuid())
  cotizacionId    String
  // Copia de los datos de la plantilla
  categoria       String // Ej: "PLC", "HMI", etc.
  subtotalInterno Float // üîí Copia del subtotal interno
  subtotalCliente Float // Copia del subtotal cliente
  // Datos personalizados en la cotizacion
  // Fechas de auditor√≠a
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  // Relaciones
  cotizacion      Cotizacion               @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  items           CotizacionServicioItem[] // Copia de los datos de la plantilla
}

model CotizacionServicioItem {
  id                   String             @id @default(cuid()) // Identificador √∫nico
  cotizacionServicioId String // Relaci√≥n con la secci√≥n de servicios
  catalogoServicioId   String? // FK opcional para trazabilidad al cat√°logo
  unidadServicioId     String // FK hacia unidad de medida del servicio
  recursoId            String // FK hacia el recurso t√©cnico que realiza el trabajo
  // üîÑ Copia exacta del cat√°logo al momento de crear desde plantilla
  nombre               String // Nombre editable por el comercial
  descripcion          String // Descripci√≥n funcional del √≠tem
  categoria            String // Ej: "PLC", "HMI"  
  unidadServicioNombre String // Texto plano: ej. "Plano", "Motor" 
  recursoNombre        String // Texto plano: ej. "Ingeniero", "T√©cnico"
  formula              String // Tipo de c√°lculo: "Proporcional", "Escalonada", "Fijo"
  horaBase             Float? // Horas base (escalonada)
  horaRepetido         Float? // Horas por unidad repetida
  horaUnidad           Float? // Horas por unidad (proporcional)
  horaFijo             Float? // Horas fijas (fijo)  
  // üßë‚Äçüîß Recurso t√©cnico asociado al √≠tem                              // Costo hora en el momento de la copia 
  costoHora            Float
  // üìã Datos editables y calculados 
  cantidad             Int // Cantidad de unidades
  horaTotal            Float // Total de horas calculadas
  factorSeguridad      Float // Factor de seguridad aplicado
  margen               Float // Margen comercial aplicado
  costoInterno         Float // = horaTotal * costoHora * FS
  costoCliente         Float // = costoInterno * margen
  // üïì Auditor√≠a
  createdAt            DateTime           @default(now()) // Fecha de creaci√≥n
  updatedAt            DateTime           @updatedAt // √öltima actualizaci√≥n
  // üîó Relaciones
  cotizacionServicio   CotizacionServicio @relation(fields: [cotizacionServicioId], references: [id], onDelete: Cascade)
  catalogoServicio     CatalogoServicio?  @relation(fields: [catalogoServicioId], references: [id])
  recurso              Recurso            @relation(fields: [recursoId], references: [id]) // Recurso t√©cnico (FK)
  unidadServicio       UnidadServicio     @relation(fields: [unidadServicioId], references: [id]) // Unidad de medici√≥n del servicio (FK)
}

model CotizacionGasto {
  id              String                @id @default(cuid()) // Identificador √∫nico del grupo de gastos
  cotizacionId    String // Relaci√≥n con la cotizaci√≥n
  nombre          String // Nombre del grupo (ej. "Trabajo en campo")
  descripcion     String? // Descripci√≥n opcional
  subtotalInterno Float // Total de costos internos de los √≠tems
  subtotalCliente Float // Total de costos cliente de los √≠tems
  // üïì Auditor√≠a
  createdAt       DateTime              @default(now()) // Fecha de creaci√≥n
  updatedAt       DateTime              @updatedAt // √öltima modificaci√≥n
  // üîó Relaciones
  cotizacion      Cotizacion            @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  items           CotizacionGastoItem[] // √çtems espec√≠ficos incluidos en esta cotizaci√≥n
}

model CotizacionGastoItem {
  id              String          @id @default(cuid()) // Identificador √∫nico del √≠tem
  gastoId         String // Relaci√≥n con el grupo de gasto
  nombre          String // Nombre del gasto (ej. "Ex√°menes m√©dicos")
  descripcion     String? // Detalle adicional (opcional)
  cantidad        Float // Cantidad de unidades
  precioUnitario  Float // Precio por unidad (interno)
  factorSeguridad Float           @default(1.0) // Factor de seguridad (ej. 1.1)
  margen          Float           @default(1.0) // Margen para venta al cliente
  costoInterno    Float // = cantidad * precioUnitario * factorSeguridad
  costoCliente    Float // = costoInterno * margen
  // üïì Auditor√≠a
  createdAt       DateTime        @default(now()) // Fecha de creaci√≥n
  updatedAt       DateTime        @updatedAt // √öltima modificaci√≥n
  // üîó Relaciones
  gasto           CotizacionGasto @relation(fields: [gastoId], references: [id], onDelete: Cascade)
}

// ============================
// üèóÔ∏è Proyectos
// ============================

model Proyecto {
  id           String  @id @default(cuid()) // Identificador √∫nico del proyecto
  clienteId    String // Cliente asociado al proyecto
  comercialId  String // Usuario comercial asignado
  gestorId     String // Usuario gestor del proyecto
  cotizacionId String? // Cotizaci√≥n desde la cual se gener√≥ (opcional)

  // üßæ Copia de los datos de la cotizaci√≥n
  nombre                String // Nombre del proyecto
  totalEquiposInterno   Float  @default(0) // üîí Presupuesto interno (equipos)
  totalServiciosInterno Float  @default(0) // üîí Presupuesto interno (servicios)
  totalGastosInterno    Float  @default(0) // üîí Presupuesto interno (gastos)
  totalInterno          Float  @default(0) // üîí Presupuesto total interno
  totalCliente          Float  @default(0) // Total cotizado al cliente
  descuento             Float  @default(0) // Descuento aplicado en la cotizaci√≥n
  grandTotal            Float  @default(0) // Total cotizado final

  // üõ†Ô∏è Datos personalizados del proyecto
  codigo      String // C√≥digo interno del proyecto
  estado      String    @default("activo") // Estado general del proyecto
  fechaInicio DateTime // Fecha real de inicio
  fechaFin    DateTime? // Fecha real de t√©rmino (opcional)

  // üìä Seguimiento de ejecuci√≥n real
  totalRealEquipos   Float @default(0) // Costo real acumulado (equipos)
  totalRealServicios Float @default(0) // Costo real acumulado (servicios)
  totalRealGastos    Float @default(0) // Costo real acumulado (gastos)
  totalReal          Float @default(0) // Costo real total

  // üïì Auditor√≠a
  createdAt DateTime @default(now()) // Fecha de creaci√≥n
  updatedAt DateTime @updatedAt // Fecha de modificaci√≥n

  // üîó Relaciones
  cliente               Cliente               @relation(fields: [clienteId], references: [id])
  comercial             User                  @relation("ComercialProyecto", fields: [comercialId], references: [id])
  gestor                User                  @relation("GestorProyecto", fields: [gestorId], references: [id])
  cotizacion            Cotizacion?           @relation(fields: [cotizacionId], references: [id])
  equipos               ProyectoEquipo[]
  servicios             ProyectoServicio[]
  gastos                ProyectoGasto[]
  listaRequerimientos   ListaRequerimiento[]
  listaEquipos          ListaEquipos[]
  cotizacionesProveedor CotizacionProveedor[]
  valorizaciones        Valorizacion[]
  paquetesCompra        PaqueteCompra[] // Relaci√≥n con paquetes de compra
  registrosHoras        RegistroHoras[] // ‚è±Ô∏è Relaci√≥n con registros de horas hombre
}

model ProyectoEquipo {
  id              String               @id @default(cuid()) // Identificador √∫nico
  proyectoId      String // Proyecto al que pertenece
  responsableId   String // Responsable t√©cnico del grupo
  // üßæ Copia desde la cotizaci√≥n
  nombre          String // Nombre del grupo de equipos
  descripcion     String? // Descripci√≥n opcional
  subtotalInterno Float // üîí Subtotal cotizado interno
  subtotalCliente Float // Subtotal cotizado al cliente
  // üõ†Ô∏è Datos personalizados del proyecto
  subtotalReal    Float                @default(0) // Costo real ejecutado
  // üïì Auditor√≠a
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  // üîó Relaciones
  proyecto        Proyecto             @relation(fields: [proyectoId], references: [id])
  responsable     User                 @relation(fields: [responsableId], references: [id])
  items           ProyectoEquipoItem[]
}

enum EstadoEquipo {
  pendiente
  revisado_tecnico
  aprobado_coordinador
  aprobado_gestor
  en_lista
  comprado
  reemplazado
  entregado
}

model ProyectoEquipoItem {
  id                   String                   @id @default(cuid()) // Identificador √∫nico
  proyectoEquipoId     String // Relaci√≥n con secci√≥n de equipos
  catalogoEquipoId     String? // Relaci√≥n con cat√°logo (opcional)
  listaId              String? // üÜï Relaci√≥n opcional con ListaEquipos
  // üßæ Copia desde la cotizaci√≥n
  codigo               String
  descripcion          String
  categoria            String                   @default("SIN-CATEGORIA")
  unidad               String
  marca                String                   @default("SIN-MARCA")
  precioInterno        Float
  precioCliente        Float
  cantidad             Float
  costoInterno         Float
  costoCliente         Float
  // üõ†Ô∏è Datos personalizados del proyecto
  precioReal           Float                    @default(0)
  cantidadReal         Float                    @default(0) // Precio real ejecutado
  costoReal            Float                    @default(0)
  tiempoEntrega        Int? // en d√≠as
  fechaEntregaEstimada DateTime? // fecha estimada de entrega
  estado               EstadoEquipo             @default(pendiente) // <--- Ahora con enum           // pendiente, revisado_tecnico, aprobado_coordinador, aprobado_gestor, en_lista, comprado
  aprobado             Boolean                  @default(false) // Validado t√©cnicamente
  motivoCambio         String? // Motivo si fue modificado o reemplazado                      // Costo real ejecutado
  nuevo                Boolean                  @default(false) // Si fue a√±adido fuera de cotizaci√≥n
  // üïì Auditor√≠a
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  // üîó Relaciones
  proyectoEquipo       ProyectoEquipo           @relation(fields: [proyectoEquipoId], references: [id], onDelete: Cascade)
  catalogoEquipo       CatalogoEquipo?          @relation(fields: [catalogoEquipoId], references: [id])
  lista   ListaEquipos? @relation(fields: [listaId], references: [id], onDelete: SetNull) // ‚úÖ esto falta
  listaRequerimientos  ListaRequerimientoItem[] // Asociado a √≠tems de lista
  listaEquipos         ListaEquiposItem[]
}

model ProyectoServicio {
  id              String                 @id @default(cuid()) // Identificador √∫nico
  proyectoId      String // Proyecto asociado
  responsableId   String // Responsable de la secci√≥n
  // üßæ Copia desde la cotizaci√≥n
  categoria       String // Ej: "PLC", "HMI", etc.
  subtotalInterno Float // üîí Subtotal cotizado interno
  subtotalCliente Float // Subtotal cotizado al cliente
  // üõ†Ô∏è Datos personalizados del proyecto
  subtotalReal    Float                  @default(0) // Costo real ejecutado
  // üïì Auditor√≠a
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  // üîó Relaciones
  proyecto        Proyecto               @relation(fields: [proyectoId], references: [id])
  responsable     User                   @relation(fields: [responsableId], references: [id])
  items           ProyectoServicioItem[]
  registrosHoras  RegistroHoras[] // ‚è±Ô∏è Relaci√≥n con registros de horas hombre
}

model ProyectoServicioItem {
  id                 String            @id @default(cuid()) // Identificador √∫nico
  proyectoServicioId String // Secci√≥n a la que pertenece
  catalogoServicioId String? // Referencia al cat√°logo (opcional)
  // üßæ Copia desde la cotizaci√≥n
  categoria          String
  costoHoraInterno   Float // üîí Precio hora cotizada
  costoHoraCliente   Float
  nombre             String
  cantidadHoras      Int
  costoInterno       Float // cantidad * costoHoraInterno
  costoCliente       Float // cantidad * costoHoraCliente
  // üõ†Ô∏è Datos personalizados del proyecto
  costoReal          Float             @default(0) // Costo real acumulado
  horasEjecutadas    Float             @default(0) // Horas registradas
  motivoCambio       String? // Motivo si se reemplaz√≥ o modific√≥
  nuevo              Boolean           @default(false) // Si fue agregado fuera de cotizaci√≥n
  // üïì Auditor√≠a
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  // üîó Relaciones
  proyectoServicio   ProyectoServicio  @relation(fields: [proyectoServicioId], references: [id])
  catalogoServicio   CatalogoServicio? @relation(fields: [catalogoServicioId], references: [id])
}

model ProyectoGasto {
  id         String @id @default(cuid()) // Identificador √∫nico
  proyectoId String // Proyecto al que pertenece

  // üßæ Copia desde la cotizaci√≥n
  nombre          String // Nombre del grupo de gastos
  descripcion     String?
  subtotalInterno Float // üîí Subtotal cotizado interno
  subtotalCliente Float // Subtotal cotizado al cliente

  // üõ†Ô∏è Datos personalizados del proyecto
  subtotalReal Float @default(0) // Costo real ejecutado

  // üïì Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üîó Relaciones
  proyecto Proyecto            @relation(fields: [proyectoId], references: [id])
  items    ProyectoGastoItem[]
}

model ProyectoGastoItem {
  id              String        @id @default(cuid()) // Identificador √∫nico
  gastoId         String // Relaci√≥n con grupo de gasto
  // üßæ Copia desde la cotizaci√≥n
  nombre          String
  descripcion     String?
  cantidad        Float
  precioUnitario  Float
  factorSeguridad Float
  margen          Float
  costoInterno    Float
  costoCliente    Float
  // üõ†Ô∏è Datos personalizados del proyecto
  costoReal       Float         @default(0) // Costo real ejecutado
  // üïì Auditor√≠a
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  // üîó Relaciones
  gasto           ProyectoGasto @relation(fields: [gastoId], references: [id])
}

model ListaEquipos {
  id          String   @id @default(cuid())
  proyectoId  String
  nombre      String
  descripcion String?
  estado      String   @default("borrador")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  proyecto            Proyecto             @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  items               ListaEquiposItem[]
  proyectoEquipoItems ProyectoEquipoItem[] // ‚úÖ relaci√≥n inversa
}

model ListaEquiposItem {
  id                   String  @id @default(cuid())
  listaId              String
  proyectoEquipoItemId String?

  codigo            String
  descripcion       String
  unidad            String
  cantidad          Float
  precioReferencial Float?

  lista              ListaEquipos              @relation(fields: [listaId], references: [id], onDelete: Cascade)
  proyectoEquipoItem ProyectoEquipoItem? @relation(fields: [proyectoEquipoItemId], references: [id], onDelete: SetNull)
  cotizaciones       CotizacionProveedorItem[]
}

model CotizacionProveedor {
  id         String   @id @default(cuid())
  proyectoId String
  nombre     String // nombre de proveedor
  ruc        String?
  contacto   String?
  estado     String   @default("enviado")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  proyecto Proyecto                  @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  items    CotizacionProveedorItem[]
}

model CotizacionProveedorItem {
  id             String  @id @default(cuid())
  cotizacionId   String
  listaItemId    String
  precioUnitario Float
  tiempoEntrega  Int
  seleccionado   Boolean @default(false)

  cotizacion CotizacionProveedor @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  listaItem  ListaEquiposItem    @relation(fields: [listaItemId], references: [id], onDelete: Cascade)
}

model ListaRequerimiento {
  id              String    @id @default(cuid())
  proyectoId      String
  nombre          String
  descripcion     String?
  estado          String    @default("pendiente")
  fechaAprobacion DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  proyecto Proyecto                 @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  items    ListaRequerimientoItem[]
}

model ListaRequerimientoItem {
  id                   String    @id @default(cuid())
  listaId              String
  proyectoEquipoItemId String
  codigo               String
  descripcion          String
  unidad               String
  cantidad             Float
  precioUnitario       Float?
  costoTotal           Float?
  fechaRequerida       DateTime?
  estado               String    @default("pendiente")
  cantidadComprada     Float?
  cantidadPendiente    Float?
  observaciones        String?
  nuevo                Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lista              ListaRequerimiento  @relation(fields: [listaId], references: [id], onDelete: Cascade)
  proyectoEquipoItem ProyectoEquipoItem  @relation(fields: [proyectoEquipoItemId], references: [id])
  paquetes           PaqueteCompraItem[]
}

model PaqueteCompra {
  id                   String    @id @default(cuid())
  proyectoId           String
  nombre               String
  descripcion          String?
  estado               String    @default("pendiente")
  fechaEnvio           DateTime?
  fechaEntregaEstimada DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  proyecto Proyecto            @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  items    PaqueteCompraItem[]
}

model PaqueteCompraItem {
  id                  String    @id @default(cuid())
  paqueteId           String
  requerimientoItemId String
  codigo              String
  descripcion         String
  unidad              String
  cantidad            Float
  proveedor           String?
  precioUnitario      Float?
  precioReferencial   Float?
  precioCotizado      Float?
  costoTotal          Float?
  fechaEntrega        DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  paquete           PaqueteCompra          @relation(fields: [paqueteId], references: [id], onDelete: Cascade)
  requerimientoItem ListaRequerimientoItem @relation(fields: [requerimientoItemId], references: [id])
}

model Valorizacion {
  id            String   @id @default(cuid()) // Identificador √∫nico
  proyectoId    String // Proyecto al que pertenece
  nombre        String // Nombre de la valorizaci√≥n (Ej. "Valorizaci√≥n 1")
  descripcion   String? // Descripci√≥n opcional
  periodoInicio DateTime // Fecha de inicio del periodo valorizado
  periodoFin    DateTime // Fecha de fin del periodo valorizado
  estado        String   @default("pendiente") // pendiente, aprobada, observada, enviada
  montoTotal    Float // Monto total valorizado en este periodo
  // üïì Auditor√≠a
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // üîó Relaciones
  proyecto      Proyecto @relation(fields: [proyectoId], references: [id])
}

model RegistroHoras {
  id String @id @default(cuid()) // Identificador √∫nico del registro

  // üîÑ Copia de datos base
  proyectoId         String // Proyecto asociado
  proyectoServicioId String // Secci√≥n de servicio al que pertenece
  categoria          String // Ej: "PLC", "HMI", etc.
  nombreServicio     String // Nombre del servicio
  recursoId          String // Recurso t√©cnico asociado (FK)
  recursoNombre      String // Nombre del recurso (Ingeniero, T√©cnico, etc.)
  usuarioId          String // Usuario (t√©cnico) que realiza el registro

  // ‚úçÔ∏è Datos personalizados del registro
  fechaTrabajo    DateTime // Fecha del d√≠a trabajado
  horasTrabajadas Float // Horas efectivamente trabajadas
  descripcion     String? // Descripci√≥n opcional del trabajo realizado
  observaciones   String? // Observaciones generales (ej. incidencias, paradas)
  aprobado        Boolean  @default(false) // Indicador si el registro fue aprobado por supervisor

  // üïì Auditor√≠a
  createdAt DateTime @default(now()) // Fecha de creaci√≥n del registro
  updatedAt DateTime @updatedAt // Fecha de √∫ltima modificaci√≥n

  // üîó Relaciones
  proyecto         Proyecto         @relation(fields: [proyectoId], references: [id])
  proyectoServicio ProyectoServicio @relation(fields: [proyectoServicioId], references: [id])
  recurso          Recurso          @relation(fields: [recursoId], references: [id])
  usuario          User             @relation(fields: [usuarioId], references: [id])
}
