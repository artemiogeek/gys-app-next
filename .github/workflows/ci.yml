# 🚀 CI/CD Pipeline - Sistema GYS
# 
# Pipeline automatizado para testing, cobertura, calidad de código
# y deployment del sistema GYS con Next.js 14+.
# 
# @author TRAE - Agente Senior Fullstack
# @version 1.0.0

name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'
  DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/gys_test'
  NEXTAUTH_SECRET: 'test-secret-key-for-ci'
  NEXTAUTH_URL: 'http://localhost:3000'

jobs:
  # 🔍 Análisis de código y linting
  code-quality:
    name: 📊 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🎨 Run ESLint
        run: npm run lint
      
      - name: 🎯 Run TypeScript check
        run: npm run type-check
      
      - name: 💅 Check code formatting
        run: npm run format:check
      
      - name: 🔍 Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

  # 🧪 Tests unitarios y de integración
  unit-tests:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gys_test
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🗄️ Setup database
        run: |
          npx prisma generate
          npx prisma db push
          npx prisma db seed
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
      
      - name: 🧪 Run unit tests
        run: npm run test:coverage
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: 📈 Coverage threshold check
        run: |
          COVERAGE=$(npm run test:coverage:json | grep -o '"total":{[^}]*}' | grep -o '"pct":[0-9.]*' | head -1 | grep -o '[0-9.]*')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 80% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 80% threshold"
          fi
      
      - name: 📋 Generate test report
        if: always()
        run: |
          npm run test:report
          echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Coverage: $(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')%" >> $GITHUB_STEP_SUMMARY

  # 🎭 Tests E2E con Playwright
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gys_test
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: 🗄️ Setup database
        run: |
          npx prisma generate
          npx prisma db push
          npx prisma db seed
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
      
      - name: 🏗️ Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
      
      - name: 🎭 Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
      
      - name: 📸 Upload E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
      
      - name: 📊 Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: test-results/
          retention-days: 7

  # 🏗️ Build y validación
  build:
    name: 🏗️ Build & Deploy Check
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
      
      - name: 📦 Check bundle size
        run: |
          npm run analyze
          BUNDLE_SIZE=$(du -sh .next | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY
      
      - name: 🔍 Check for unused dependencies
        run: npx depcheck --ignores="@types/*,eslint-*,prettier,@playwright/*"
        continue-on-error: true

  # 🚀 Deploy a staging (solo en develop)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: gys-staging.vercel.app

  # 🌟 Deploy a producción (solo en main)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🌟 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # 📊 Reporte final
  report:
    name: 📊 Final Report
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, e2e-tests, build]
    if: always()
    
    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 🎯 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "🌿 **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
      
      - name: 📧 Notify on failure
        if: failure()
        run: |
          echo "❌ Pipeline failed for commit ${{ github.sha }}"
          echo "Please check the logs and fix the issues."

# 🔧 Configuraciones adicionales
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 📋 Permisos necesarios
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write