# 🚀 Pipeline CI/CD para Módulo Cronograma ERP
# 🎯 Objetivo: Automatizar tests, validaciones y deploy del sistema cronograma
# 📅 Triggers: Push a main, PRs, y deploy manual
# 👤 Autor: Sistema GYS - Agente TRAE

name: 🏗️ Cronograma ERP CI/CD

on:
  # ✅ Triggers automáticos
  push:
    branches: [main, develop]
    paths:
      - 'src/components/proyectos/**'
      - 'src/app/proyectos/**/cronograma/**'
      - 'src/lib/services/proyectoEdt.ts'
      - 'src/types/modelos.ts'
      - 'prisma/schema.prisma'
      - 'scripts/deploy-cronograma.sh'
      - 'scripts/monitor-cronograma.ts'
      - 'scripts/backfill-cronograma.js'
      - '.github/workflows/cronograma-ci.yml'
  
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/components/proyectos/**'
      - 'src/app/proyectos/**/cronograma/**'
      - 'src/lib/services/proyectoEdt.ts'
      - 'src/types/modelos.ts'
      - 'prisma/schema.prisma'
  
  # ✅ Deploy manual
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_backfill:
        description: 'Run data backfill'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip tests (emergency deploy)'
        required: false
        default: false
        type: boolean

# ✅ Variables de entorno globales
env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

# ✅ Jobs del pipeline
jobs:
  # 🔍 Job 1: Análisis estático y linting
  lint-and-analyze:
    name: 🔍 Lint & Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🔍 Run ESLint
        run: |
          npm run lint -- --format=json --output-file=eslint-report.json || true
          npm run lint
      
      - name: 🎯 Run TypeScript check
        run: npm run type-check
      
      - name: 📊 Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: eslint-report.json
          retention-days: 7

  # 🧪 Job 2: Tests unitarios y de integración
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # ✅ Servicios necesarios
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gys_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        test-suite: ['client', 'server', 'e2e']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gys_test
        run: |
          npx prisma generate
          npx prisma db push --force-reset
          npx prisma db seed
      
      - name: 🧪 Run tests - ${{ matrix.test-suite }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gys_test
          CI: true
        run: |
          case "${{ matrix.test-suite }}" in
            "client")
              npm run test:client -- --coverage --watchAll=false
              ;;
            "server")
              npm run test:server -- --coverage --watchAll=false
              ;;
            "e2e")
              npm run test:e2e -- --headless
              ;;
          esac
      
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.test-suite != 'e2e'
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage
          fail_ci_if_error: false
      
      - name: 📋 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # 🏗️ Job 3: Build y validación
  build:
    name: 🏗️ Build & Validate
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-analyze]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🔨 Build application
        env:
          SKIP_ENV_VALIDATION: true
        run: |
          npm run build
          echo "✅ Build completed successfully"
      
      - name: 📦 Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 7
      
      - name: 🔍 Validate cronograma components
        run: |
          echo "🔍 Validating cronograma components..."
          
          # Verificar que existen los componentes principales
          test -f "src/components/proyectos/EdtList.tsx" || (echo "❌ EdtList component missing" && exit 1)
          test -f "src/components/proyectos/EdtForm.tsx" || (echo "❌ EdtForm component missing" && exit 1)
          test -f "src/components/proyectos/KpiDashboard.tsx" || (echo "❌ KpiDashboard component missing" && exit 1)
          test -f "src/components/proyectos/CronogramaContainer.tsx" || (echo "❌ CronogramaContainer component missing" && exit 1)
          
          # Verificar página de cronograma
          test -f "src/app/proyectos/[id]/cronograma/page.tsx" || (echo "❌ Cronograma page missing" && exit 1)
          
          # Verificar servicios
          test -f "src/lib/services/proyectoEdt.ts" || (echo "❌ ProyectoEdt service missing" && exit 1)
          
          # Verificar scripts
          test -f "scripts/deploy-cronograma.sh" || (echo "❌ Deploy script missing" && exit 1)
          test -f "scripts/monitor-cronograma.ts" || (echo "❌ Monitor script missing" && exit 1)
          test -f "scripts/backfill-cronograma.js" || (echo "❌ Backfill script missing" && exit 1)
          
          echo "✅ All cronograma components validated"

  # 🔒 Job 4: Security scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level=high --production
          echo "✅ Security audit completed"
      
      - name: 🔐 Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 📊 Job 5: Performance y quality gates
  quality-gates:
    name: 📊 Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 📊 Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
      
      - name: 🎯 Check coverage thresholds
        run: |
          echo "🎯 Checking coverage thresholds..."
          
          # Verificar cobertura mínima (configurar según necesidades)
          COVERAGE_THRESHOLD=85
          
          # Extraer cobertura del reporte (simplificado)
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.statements.pct)")
            echo "📊 Current coverage: ${COVERAGE}%"
            
            if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
              echo "❌ Coverage below threshold: ${COVERAGE}% < ${COVERAGE_THRESHOLD}%"
              exit 1
            else
              echo "✅ Coverage meets threshold: ${COVERAGE}% >= ${COVERAGE_THRESHOLD}%"
            fi
          else
            echo "⚠️ Coverage report not found, skipping check"
          fi
      
      - name: 📝 Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 🏗️ Cronograma ERP - Quality Report\n\n';
            
            // Agregar información de cobertura si existe
            if (fs.existsSync('coverage/coverage-summary.json')) {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json'));
              comment += `### 📊 Test Coverage\n`;
              comment += `- **Statements**: ${coverage.total.statements.pct}%\n`;
              comment += `- **Branches**: ${coverage.total.branches.pct}%\n`;
              comment += `- **Functions**: ${coverage.total.functions.pct}%\n`;
              comment += `- **Lines**: ${coverage.total.lines.pct}%\n\n`;
            }
            
            comment += '### ✅ Validations Passed\n';
            comment += '- 🔍 Lint and static analysis\n';
            comment += '- 🧪 Unit and integration tests\n';
            comment += '- 🏗️ Build validation\n';
            comment += '- 🔒 Security scan\n';
            comment += '- 📊 Quality gates\n\n';
            comment += '*Generated by Cronograma ERP CI/CD Pipeline*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # 🚀 Job 6: Deploy (solo en main y manual)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, build, security]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch')
    
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 🗄️ Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "🗄️ Running database migrations..."
          npx prisma generate
          npx prisma db push
          echo "✅ Migrations completed"
      
      - name: 🔄 Run backfill (if requested)
        if: github.event.inputs.run_backfill == 'true'
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "🔄 Running data backfill..."
          node scripts/backfill-cronograma.js --verbose
          echo "✅ Backfill completed"
      
      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.event.inputs.environment == 'production' && '--prod' || '' }}
      
      - name: 📊 Run post-deploy monitoring
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "📊 Running post-deploy monitoring..."
          npx ts-node scripts/monitor-cronograma.ts --markdown
          echo "✅ Monitoring completed"
      
      - name: 📋 Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: |
            logs/monitor-report-*.md
            logs/backfill-report-*.json
          retention-days: 30
      
      - name: 🎉 Notify deployment success
        if: success()
        run: |
          echo "🎉 Deployment successful!"
          echo "🌐 URL: ${{ steps.deploy.outputs.preview-url }}"
          echo "📊 Environment: ${{ github.event.inputs.environment || 'staging' }}"

  # 🧹 Job 7: Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy]
    if: always()
    
    steps:
      - name: 🧹 Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Mantener solo los artefactos importantes
            const keepArtifacts = ['deployment-report', 'test-results-client', 'test-results-server'];
            
            for (const artifact of artifacts.data.artifacts) {
              if (!keepArtifacts.includes(artifact.name)) {
                console.log(`🗑️ Deleting artifact: ${artifact.name}`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }
            
            console.log('✅ Cleanup completed');

# 📊 Configuración adicional
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 🔔 Notificaciones (opcional)
# Se pueden agregar integraciones con Slack, Discord, etc.