// ===================================================
// üìÅ Archivo: route.ts
// üìå Ubicaci√≥n: /api/cotizaciones/versions/[id]
// üîß Descripci√≥n: API para gesti√≥n de versi√≥n espec√≠fica
// ‚úÖ GET: Obtener versi√≥n, PUT: Actualizar estado
// ===================================================

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'

export const dynamic = 'force-dynamic'

// ‚úÖ GET /api/cotizaciones/versions/[id] - Obtener versi√≥n espec√≠fica
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const session = await getServerSession(authOptions)

    if (!session) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })
    }

    const version = await prisma.cotizacionVersion.findUnique({
      where: { id },
      include: {
        usuario: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        cotizacion: {
          select: {
            id: true,
            codigo: true,
            nombre: true,
            comercialId: true,
            cliente: {
              select: {
                id: true,
                nombre: true
              }
            }
          }
        }
      }
    })

    if (!version) {
      return NextResponse.json({ error: 'Versi√≥n no encontrada' }, { status: 404 })
    }

    // Verificar permisos
    const userRole = session.user.role
    const isOwner = version.cotizacion?.comercialId === session.user.id
    const hasPermission = userRole === 'admin' || userRole === 'gerente' || isOwner

    if (!hasPermission) {
      return NextResponse.json({ error: 'No tiene permisos para ver esta versi√≥n' }, { status: 403 })
    }

    return NextResponse.json(version)
  } catch (error) {
    console.error('‚ùå Error al obtener versi√≥n:', error)
    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })
  }
}

// ‚úÖ PUT /api/cotizaciones/versions/[id] - Actualizar estado de versi√≥n
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    const session = await getServerSession(authOptions)

    if (!session?.user?.id) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })
    }

    const { estado } = await request.json()

    if (!estado) {
      return NextResponse.json({ error: 'Estado requerido' }, { status: 400 })
    }

    // Verificar que la versi√≥n existe
    const versionExistente = await prisma.cotizacionVersion.findUnique({
      where: { id },
      include: {
        cotizacion: true
      }
    })

    if (!versionExistente) {
      return NextResponse.json({ error: 'Versi√≥n no encontrada' }, { status: 404 })
    }

    // Verificar permisos
    const userRole = session.user.role
    const isOwner = versionExistente.cotizacion?.comercialId === session.user.id
    const hasPermission = userRole === 'admin' || userRole === 'gerente' || isOwner

    if (!hasPermission) {
      return NextResponse.json({ error: 'No tiene permisos para actualizar esta versi√≥n' }, { status: 403 })
    }

    // Actualizar estado
    const versionActualizada = await prisma.cotizacionVersion.update({
      where: { id },
      data: { estado },
      include: {
        usuario: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      }
    })

    return NextResponse.json(versionActualizada)
  } catch (error) {
    console.error('‚ùå Error al actualizar versi√≥n:', error)
    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })
  }
}