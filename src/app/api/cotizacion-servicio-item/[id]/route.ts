// ===================================================
// üìÅ Archivo: [id]/route.ts
// üìå Ubicaci√≥n: /api/cotizacion-servicio-item/[id]
// üîß Descripci√≥n: Actualiza o elimina un √≠tem de servicio de una cotizaci√≥n
// ‚úçÔ∏è Autor: Jes√∫s Artemio
// üìÖ √öltima actualizaci√≥n: 2025-05-01
// ===================================================

import { prisma } from '@/lib/prisma'
import { NextRequest, NextResponse } from 'next/server'
import { recalcularTotalesCotizacion } from '@/lib/utils/recalculoCotizacion'
import type { CotizacionServicioItemUpdatePayload } from '@/types'

// ‚úÖ Actualizar √≠tem de servicio en cotizaci√≥n
export async function PUT(req: NextRequest, context: { params: { id: string } }) {
  try {
    const { id } = await context.params // ‚úÖ Correcci√≥n para evitar error de Next.js

    if (!id || typeof id !== 'string') {
      return NextResponse.json({ error: 'ID inv√°lido' }, { status: 400 })
    }

    const data: CotizacionServicioItemUpdatePayload = await req.json()

    const actualizado = await prisma.cotizacionServicioItem.update({
      where: { id },
      data,
      select: {
        id: true,
        cotizacionServicioId: true,
        catalogoServicioId: true,
        unidadServicioId: true,
        recursoId: true,
        nombre: true,
        descripcion: true,
        categoria: true,
        formula: true,
        horaBase: true,
        horaRepetido: true,
        horaUnidad: true,
        horaFijo: true,
        unidadServicioNombre: true,
        recursoNombre: true,
        costoHora: true,
        cantidad: true,
        horaTotal: true,
        factorSeguridad: true,
        margen: true,
        costoInterno: true,
        costoCliente: true,
        createdAt: true,
        updatedAt: true
      }
    })

    const servicio = await prisma.cotizacionServicio.findUnique({
      where: { id: actualizado.cotizacionServicioId },
      select: { cotizacionId: true }
    })

    if (servicio?.cotizacionId) {
      await recalcularTotalesCotizacion(servicio.cotizacionId)
    }

    return NextResponse.json(actualizado)
  } catch (error) {
    console.error('‚ùå Error al actualizar √≠tem de servicio de cotizaci√≥n:', error)
    return NextResponse.json({ error: 'Error al actualizar √≠tem' }, { status: 500 })
  }
}

// ‚úÖ Eliminar √≠tem de servicio de cotizaci√≥n
export async function DELETE(_: NextRequest, context: { params: { id: string } }) {
  try {
    const { id } = await context.params // ‚úÖ Correcci√≥n

    if (!id || typeof id !== 'string') {
      return NextResponse.json({ error: 'ID inv√°lido' }, { status: 400 })
    }

    const item = await prisma.cotizacionServicioItem.findUnique({
      where: { id },
      select: { cotizacionServicioId: true }
    })

    await prisma.cotizacionServicioItem.delete({ where: { id } })

    if (item) {
      const servicio = await prisma.cotizacionServicio.findUnique({
        where: { id: item.cotizacionServicioId },
        select: { cotizacionId: true }
      })

      if (servicio?.cotizacionId) {
        await recalcularTotalesCotizacion(servicio.cotizacionId)
      }
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error('‚ùå Error al eliminar √≠tem de servicio de cotizaci√≥n:', error)
    return NextResponse.json({ error: 'Error al eliminar √≠tem' }, { status: 500 })
  }
}
