// ===================================================
// üìÅ Archivo: route.ts
// üìå Ubicaci√≥n: src/app/api/cotizacion-proveedor-item/seleccionar/
// üîß Descripci√≥n: API para seleccionar cotizaci√≥n de un √≠tem de lista de equipo
//
// üß† Uso: Permite cambiar la cotizaci√≥n seleccionada para un √≠tem espec√≠fico
// ‚úçÔ∏è Autor: Jes√∫s Artemio + IA GYS
// üìÖ √öltima actualizaci√≥n: 2025-01-20
// ===================================================

import { prisma } from '@/lib/prisma'
import { NextResponse } from 'next/server'

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { listaEquipoItemId, cotizacionProveedorItemId } = body

    if (!listaEquipoItemId || !cotizacionProveedorItemId) {
      return NextResponse.json(
        { error: 'listaEquipoItemId y cotizacionProveedorItemId son requeridos' },
        { status: 400 }
      )
    }

    // üîÅ Verificar que el √≠tem de cotizaci√≥n existe y pertenece al √≠tem de lista
    const cotizacionItem = await prisma.cotizacionProveedorItem.findFirst({
      where: {
        id: cotizacionProveedorItemId,
        listaEquipoItemId: listaEquipoItemId,
      },
    })

    if (!cotizacionItem) {
      return NextResponse.json(
        { error: 'La cotizaci√≥n no existe o no pertenece al √≠tem especificado' },
        { status: 404 }
      )
    }

    // üì° Transacci√≥n para actualizar la selecci√≥n
    await prisma.$transaction(async (tx) => {
      // üîÅ Desmarcar todas las cotizaciones del √≠tem como no seleccionadas
      await tx.cotizacionProveedorItem.updateMany({
        where: {
          listaEquipoItemId: listaEquipoItemId,
        },
        data: {
          esSeleccionada: false,
        },
      })

      // ‚úÖ Marcar la cotizaci√≥n espec√≠fica como seleccionada
      await tx.cotizacionProveedorItem.update({
        where: {
          id: cotizacionProveedorItemId,
        },
        data: {
          esSeleccionada: true,
        },
      })

      // üîÅ Actualizar la referencia en ListaEquipoItem
      await tx.listaEquipoItem.update({
        where: {
          id: listaEquipoItemId,
        },
        data: {
          cotizacionSeleccionadaId: cotizacionProveedorItemId,
        },
      })
    })

    return NextResponse.json({ success: true, message: 'Cotizaci√≥n seleccionada correctamente' })
  } catch (error) {
    console.error('‚ùå Error al seleccionar cotizaci√≥n:', error)
    return NextResponse.json(
      { error: 'Error interno del servidor: ' + String(error) },
      { status: 500 }
    )
  }
}