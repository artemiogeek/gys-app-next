// ===================================================
// üìÅ Archivo: cotizacionProveedor.ts
// üìå Ubicaci√≥n: src/lib/services/
// üîß Descripci√≥n: Funciones para consumir API de cotizaciones de proveedores
//
// üß† Uso: Se utiliza en vistas de log√≠stica para registrar y consultar cotizaciones.
// ‚úçÔ∏è Autor: Jes√∫s Artemio (GYS)
// üìÖ √öltima actualizaci√≥n: 2025-05-26
// ===================================================

import {
  CotizacionProveedor,
  CotizacionProveedorPayload,
  CotizacionProveedorUpdatePayload,
  CotizacionProveedorItemPayload,
} from '@/types'
import { buildApiUrl } from '@/lib/utils'

const BASE_URL = '/api/cotizacion-proveedor'

// ‚úÖ Obtener todas las cotizaciones
export async function getCotizacionesProveedor(): Promise<CotizacionProveedor[] | null> {
  try {
    const res = await fetch(BASE_URL)
    if (!res.ok) throw new Error('Error al obtener cotizaciones')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getCotizacionesProveedor:', error)
    return null
  }
}

// ‚úÖ Obtener una cotizaci√≥n por ID
export async function getCotizacionProveedorById(id: string): Promise<CotizacionProveedor | null> {
  try {
    const url = buildApiUrl(`${BASE_URL}/${id}`)
    const res = await fetch(url)
    if (!res.ok) throw new Error('Error al obtener la cotizaci√≥n')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getCotizacionProveedorById:', error)
    return null
  }
}

// ‚úÖ Crear nueva cotizaci√≥n
export async function createCotizacionProveedor(
  payload: CotizacionProveedorPayload
): Promise<CotizacionProveedor | null> {
  try {
    const res = await fetch(BASE_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) throw new Error('Error al crear cotizaci√≥n')
    return await res.json()
  } catch (error) {
    console.error('‚ùå createCotizacionProveedor:', error)
    return null
  }
}

// ‚úÖ Crear √≠tem para cotizaci√≥n proveedor (nuevo)
export async function createCotizacionProveedorItem(
  payload: CotizacionProveedorItemPayload
): Promise<boolean> {
  try {
    const url = buildApiUrl(`${BASE_URL}/item`)
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    return res.ok
  } catch (error) {
    console.error('‚ùå createCotizacionProveedorItem:', error)
    return false
  }
}

// ‚úÖ Actualizar cotizaci√≥n
export async function updateCotizacionProveedor(
  id: string,
  payload: CotizacionProveedorUpdatePayload
): Promise<CotizacionProveedor | null> {
  try {
    const url = buildApiUrl(`${BASE_URL}/${id}`)
    const res = await fetch(url, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) throw new Error('Error al actualizar cotizaci√≥n')
    return await res.json()
  } catch (error) {
    console.error('‚ùå updateCotizacionProveedor:', error)
    return null
  }
}

// ‚úÖ Eliminar cotizaci√≥n
export async function deleteCotizacionProveedor(id: string): Promise<boolean> {
  try {
    const url = buildApiUrl(`${BASE_URL}/${id}`)
    const res = await fetch(url, {
      method: 'DELETE',
    })
    return res.ok
  } catch (error) {
    console.error('‚ùå deleteCotizacionProveedor:', error)
    return false
  }
}
