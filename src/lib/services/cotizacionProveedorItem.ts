// ===================================================
// üìÅ Archivo: cotizacionProveedorItem.ts
// üìå Ubicaci√≥n: src/lib/services/
// üîß Descripci√≥n: Funciones para gestionar √≠tems de cotizaciones de proveedor
//
// üß† Uso: Log√≠stica registra cotizaciones por √≠tem t√©cnico de lista
// ‚úçÔ∏è Autor: Jes√∫s Artemio (GYS)
// üìÖ √öltima actualizaci√≥n: 2025-05-21
// ===================================================

import {
  CotizacionProveedorItem,
  CotizacionProveedorItemPayload,
  CotizacionProveedorItemUpdatePayload,
} from '@/types'

const BASE_URL = '/api/cotizacion-proveedor-item'

// ‚úÖ Obtener todos los √≠tems de cotizaciones
export async function getCotizacionProveedorItems(): Promise<CotizacionProveedorItem[] | null> {
  try {
    const res = await fetch(BASE_URL)
    if (!res.ok) throw new Error('Error al obtener √≠tems')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getCotizacionProveedorItems:', error)
    return null
  }
}

// ‚úÖ Obtener √≠tem por ID
export async function getCotizacionProveedorItemById(
  id: string
): Promise<CotizacionProveedorItem | null> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`)
    if (!res.ok) throw new Error('Error al obtener √≠tem')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getCotizacionProveedorItemById:', error)
    return null
  }
}

// ‚úÖ Crear nuevo √≠tem
export async function createCotizacionProveedorItem(
  payload: CotizacionProveedorItemPayload
): Promise<CotizacionProveedorItem | null> {
  try {
    const res = await fetch(BASE_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) throw new Error('Error al crear √≠tem')
    return await res.json()
  } catch (error) {
    console.error('‚ùå createCotizacionProveedorItem:', error)
    return null
  }
}

// ‚úÖ Actualizar √≠tem
export async function updateCotizacionProveedorItem(
  id: string,
  payload: CotizacionProveedorItemUpdatePayload
): Promise<CotizacionProveedorItem | null> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) throw new Error('Error al actualizar √≠tem')
    return await res.json()
  } catch (error) {
    console.error('‚ùå updateCotizacionProveedorItem:', error)
    return null
  }
}

// ‚úÖ Eliminar √≠tem
export async function deleteCotizacionProveedorItem(id: string): Promise<boolean> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`, {
      method: 'DELETE',
    })
    return res.ok
  } catch (error) {
    console.error('‚ùå deleteCotizacionProveedorItem:', error)
    return false
  }
}
