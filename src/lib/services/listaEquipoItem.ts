// ===================================================
// üìÅ Archivo: listaEquipoItem.ts
// üìå Ubicaci√≥n: src/lib/services
// üîß Descripci√≥n: Servicios para los √≠tems de la ListaEquipo
// üß† Uso: Consumido por formularios, listas y vistas de detalle
// ‚úçÔ∏è Autor: Jes√∫s Artemio (Master Experto üßô‚Äç‚ôÇÔ∏è)
// üìÖ √öltima actualizaci√≥n: 2025-05-19
// ===================================================

import {
  ListaEquipoItem,
  ListaEquipoItemPayload,
  ListaEquipoItemUpdatePayload,
} from '@/types'

const BASE_URL = '/api/lista-equipo-item'

// ‚úÖ Obtener todos los √≠tems
export async function getListaEquipoItems(): Promise<ListaEquipoItem[]> {
  try {
    const res = await fetch(BASE_URL)
    if (!res.ok) throw new Error('Error al obtener √≠tems de lista de equipos')
    return await res.json()
  } catch (error) {
    console.error('getListaEquipoItems:', error)
    return []
  }
}

// ‚úÖ Obtener √≠tem por ID
export async function getListaEquipoItemById(id: string): Promise<ListaEquipoItem | null> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`)
    if (!res.ok) throw new Error('Error al obtener √≠tem de lista de equipos')
    return await res.json()
  } catch (error) {
    console.error('getListaEquipoItemById:', error)
    return null
  }
}

// ‚úÖ Crear nuevo √≠tem manualmente
export async function createListaEquipoItem(
  payload: ListaEquipoItemPayload
): Promise<ListaEquipoItem | null> {
  try {
    const res = await fetch(BASE_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) throw new Error('Error al crear √≠tem de lista de equipos')
    return await res.json()
  } catch (error) {
    console.error('createListaEquipoItem:', error)
    return null
  }
}

// ‚úÖ Actualizar √≠tem (edici√≥n inline o cambios desde revisi√≥n)
export async function updateListaEquipoItem(
  id: string,
  payload: ListaEquipoItemUpdatePayload
): Promise<ListaEquipoItem | null> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) throw new Error('Error al actualizar √≠tem de lista de equipos')
    return await res.json()
  } catch (error) {
    console.error('updateListaEquipoItem:', error)
    return null
  }
}

// ‚úÖ Eliminar √≠tem de lista por ID
export async function deleteListaEquipoItem(id: string): Promise<boolean> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`, { method: 'DELETE' })
    return res.ok
  } catch (error) {
    console.error('deleteListaEquipoItem:', error)
    return false
  }
}

// üîÅ Crear √≠tem a partir de un ProyectoEquipoItem
export async function createListaEquipoItemFromProyecto(
  listaId: string,
  proyectoEquipoItemId: string
): Promise<void> {
  try {
    const res = await fetch(`/api/lista-equipo/item-from-proyecto`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ listaId, proyectoEquipoItemId }),
    })
    if (!res.ok) throw new Error('Error al crear √≠tem desde ProyectoEquipoItem')
  } catch (error) {
    console.error('createListaEquipoItemFromProyecto:', error)
    throw error
  }
}

// üîÅ Eliminar √≠tem de lista por ID de ProyectoEquipoItem (especial para reemplazos)
export async function deleteListaEquipoItemByProyectoItemId(
  proyectoEquipoItemId: string
): Promise<boolean> {
  try {
    const res = await fetch(`${BASE_URL}/by-proyecto/${proyectoEquipoItemId}`, {
      method: 'DELETE',
    })
    return res.ok
  } catch (error) {
    console.error('deleteListaEquipoItemByProyectoItemId:', error)
    return false
  }
}
