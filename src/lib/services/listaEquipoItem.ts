// ===================================================
// üìÅ Archivo: listaEquipoItem.ts
// üìå Ubicaci√≥n: src/lib/services
// üîß Descripci√≥n: Servicios para los √≠tems de la ListaEquipo
// üß† Uso: Consumido por formularios, listas y vistas de detalle
// ‚úçÔ∏è Autor: Jes√∫s Artemio (Master Experto üßô‚Äç‚ôÇÔ∏è)
// üìÖ √öltima actualizaci√≥n: 2025-06-09
// ===================================================

import {
  ListaEquipoItem,
  ListaEquipoItemPayload,
  ListaEquipoItemUpdatePayload,
} from '@/types'
import { buildApiUrl } from '@/lib/utils'

const BASE_URL = '/api/lista-equipo-item'

// ‚úÖ Obtener todos los √≠tems (opcionalmente por proyectoId)
export async function getListaEquipoItems(params?: { proyectoId?: string }): Promise<ListaEquipoItem[]> {
  try {
    let url = BASE_URL
    if (params?.proyectoId) url += `?proyectoId=${params.proyectoId}`

    const res = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include', // Incluir cookies de sesi√≥n
      cache: 'no-store' // Siempre obtener datos frescos
    })
    
    if (!res.ok) {
      if (res.status === 401) {
        // Redirigir al login si no est√° autenticado
        if (typeof window !== 'undefined') {
          window.location.href = '/login'
        }
        return []
      }
      throw new Error(`Error ${res.status}: ${res.statusText}`)
    }
    
    return await res.json()
  } catch (error) {
    console.error('‚ùå getListaEquipoItems:', error)
    return []
  }
}

// ‚úÖ Obtener √≠tem por ID
export async function getListaEquipoItemById(id: string): Promise<ListaEquipoItem | null> {
  try {
    const url = buildApiUrl(`${BASE_URL}/${id}`)
    const res = await fetch(url, { cache: 'no-store' })
    if (!res.ok) throw new Error('Error al obtener √≠tem de lista de equipos')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getListaEquipoItemById:', error)
    return null
  }
}

// ‚úÖ Crear √≠tem manual
export async function createListaEquipoItem(payload: ListaEquipoItemPayload): Promise<ListaEquipoItem | null> {
  try {
    const url = buildApiUrl(BASE_URL)
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) throw new Error('Error al crear √≠tem')
    return await res.json()
  } catch (error) {
    console.error('‚ùå createListaEquipoItem:', error)
    return null
  }
}

// ‚úÖ Actualizar √≠tem
export async function updateListaEquipoItem(
  id: string,
  payload: ListaEquipoItemUpdatePayload
): Promise<ListaEquipoItem | null> {
  try {
    const url = buildApiUrl(`${BASE_URL}/${id}`)
    const res = await fetch(url, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) throw new Error('Error al actualizar √≠tem')
    return await res.json()
  } catch (error) {
    console.error('‚ùå updateListaEquipoItem:', error)
    return null
  }
}

// ‚úÖ Eliminar √≠tem
export async function deleteListaEquipoItem(id: string): Promise<boolean> {
  try {
    const url = buildApiUrl(`${BASE_URL}/${id}`)
    const res = await fetch(url, { method: 'DELETE' })
    return res.ok
  } catch (error) {
    console.error('‚ùå deleteListaEquipoItem:', error)
    return false
  }
}

// üîÅ Crear √≠tem desde ProyectoEquipoItem
export async function createListaEquipoItemFromProyecto(listaId: string, proyectoEquipoItemId: string): Promise<void> {
  try {
    const res = await fetch(`/api/lista-equipo/item-from-proyecto`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ listaId, proyectoEquipoItemId }),
    })
    if (!res.ok) throw new Error('Error al crear √≠tem desde ProyectoEquipoItem')
  } catch (error) {
    console.error('‚ùå createListaEquipoItemFromProyecto:', error)
    throw error
  }
}

// ‚ùå Eliminar √≠tem por proyectoEquipoItemId
export async function deleteListaEquipoItemByProyectoItemId(proyectoEquipoItemId: string): Promise<boolean> {
  try {
    const res = await fetch(`${BASE_URL}/by-proyecto/${proyectoEquipoItemId}`, { method: 'DELETE' })
    return res.ok
  } catch (error) {
    console.error('‚ùå deleteListaEquipoItemByProyectoItemId:', error)
    return false
  }
}

// ‚úÖ Obtener √≠tems de un proyecto espec√≠ficos a√∫n disponibles
export async function getListaEquipoItemsByProyecto(proyectoId: string): Promise<ListaEquipoItem[]> {
  try {
    const res = await fetch(`${BASE_URL}/disponibles/${proyectoId}`, { cache: 'no-store' })
    if (!res.ok) throw new Error('Error al obtener √≠tems del proyecto')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getListaEquipoItemsByProyecto:', error)
    return []
  }
}

// ‚úÖ Obtener √≠tems por lista espec√≠fica
export async function getListaEquipoItemsByLista(listaId: string): Promise<ListaEquipoItem[]> {
  try {
    const url = buildApiUrl(`${BASE_URL}/by-lista/${listaId}`)
    const res = await fetch(url, {
      headers: {
        'Content-Type': 'application/json'
      },
      credentials: 'include',
      cache: 'no-store'
    })
    
    if (!res.ok) {
      if (res.status === 404) {
        console.warn(`√çtems de lista no encontrados: ${listaId}`)
        return []
      }
      if (res.status === 401) {
        console.warn('No autorizado para obtener √≠tems de la lista')
        return []
      }
      console.error(`Error ${res.status}: ${res.statusText}`)
      return []
    }
    
    return await res.json()
  } catch (error) {
    console.error('‚ùå getListaEquipoItemsByLista:', error)
    return []
  }
}

// ‚úÖ Seleccionar cotizaci√≥n ganadora (v√≠a cotizaci√≥nProveedorItemId)
export async function seleccionarCotizacionGanadora(itemId: string, cotizacionProveedorItemId: string) {
  try {
    const res = await fetch(`${BASE_URL}/${itemId}/seleccionar-cotizacion`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ cotizacionProveedorItemId }),
    })
    if (!res.ok) throw new Error('Error al seleccionar cotizaci√≥n ganadora')
    return await res.json()
  } catch (error) {
    console.error('‚ùå seleccionarCotizacionGanadora:', error)
    throw error
  }
}

// üß™ Versi√≥n legacy (mantener por compatibilidad)
export async function seleccionarCotizacion(listaEquipoItemId: string, cotizacionId: string): Promise<boolean> {
  try {
    const res = await fetch(`/api/lista-equipo-item/seleccionar-cotizacion`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ listaEquipoItemId, cotizacionId }),
    })
    return res.ok
  } catch (error) {
    console.error('‚ùå seleccionarCotizacion:', error)
    return false
  }
}

export async function reemplazarItemLista(id: string, data: Partial<ListaEquipoItem>) {
  console.log('üîç reemplazarItemLista called with:', { id, data })
  
  try {
    const res = await fetch(`/api/lista-equipo-item/${id}/reemplazar`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })

    console.log('üîç API Response status:', res.status)
    console.log('üîç API Response ok:', res.ok)

    if (!res.ok) {
      const errorText = await res.text()
      console.error('‚ùå API Error response:', errorText)
      throw new Error(`Error al reemplazar √≠tem de lista: ${res.status} - ${errorText}`)
    }

    const result = await res.json()
    console.log('‚úÖ API Success response:', result)
    return result
  } catch (error) {
    console.error('‚ùå reemplazarItemLista error:', error)
    throw error
  }
}
