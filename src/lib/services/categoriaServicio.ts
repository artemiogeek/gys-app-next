// ===================================================
// üìÅ Archivo: categoriaServicio.ts
// üìå Ubicaci√≥n: src/lib/services/
// üîß Servicio CRUD para CategoriaServicio usando Fetch API
//
// ‚ú® M√©todos:
// - getCategoriasServicio(): Lista todas las categor√≠as
// - getCategoriaServicioById(id): Busca una categor√≠a por ID
// - createCategoriaServicio(payload): Crea nueva categor√≠a
// - updateCategoriaServicio(id, payload): Actualiza categor√≠a
// - deleteCategoriaServicio(id): Elimina categor√≠a por ID
//
// üß† Tipado desde src/types/modelos.ts y payloads.ts
// üåê Conectado con las rutas: /api/categoria-servicio y /api/categoria-servicio/[id]
// ‚úçÔ∏è Autor: Jes√∫s Artemio (Master Experto üßô‚Äç‚ôÇÔ∏è)
// üìÖ √öltima actualizaci√≥n: 2025-04-20
// ===================================================

import { CategoriaServicio } from '@/types'
import {
  CategoriaServicioPayload,
  CategoriaServicioUpdatePayload,
} from '@/types'

export async function getCategoriasServicio(): Promise<CategoriaServicio[]> {
  const res = await fetch('/api/categoria-servicio')
  if (!res.ok) throw new Error('Error al obtener categor√≠as')
  return res.json()
}

export async function getCategoriaServicioById(id: string): Promise<CategoriaServicio> {
  const res = await fetch(`/api/categoria-servicio/${id}`)
  if (!res.ok) throw new Error('Error al obtener categor√≠a')
  return res.json()
}

export async function createCategoriaServicio(
  payload: CategoriaServicioPayload
): Promise<CategoriaServicio> {
  const res = await fetch('/api/categoria-servicio', {
    method: 'POST',
    body: JSON.stringify(payload),
    headers: { 'Content-Type': 'application/json' },
  })

  if (!res.ok) throw new Error('Error al crear categor√≠a')
  return res.json()
}

export async function updateCategoriaServicio(
  id: string,
  payload: CategoriaServicioUpdatePayload
): Promise<CategoriaServicio> {
  const res = await fetch(`/api/categoria-servicio/${id}`, {
    method: 'PUT',
    body: JSON.stringify(payload),
    headers: { 'Content-Type': 'application/json' },
  })

  if (!res.ok) throw new Error('Error al actualizar categor√≠a')
  return res.json()
}

export async function deleteCategoriaServicio(id: string): Promise<CategoriaServicio> {
  const res = await fetch(`/api/categoria-servicio/${id}`, {
    method: 'DELETE',
  })

  if (!res.ok) {
    const errorData = await res.json().catch(() => ({})) // <- si no es JSON v√°lido
    console.error('‚ùå Backend respondi√≥ con error:', errorData)
    throw new Error('Error al eliminar categor√≠a')
  }

  return res.json()
}
