// ===================================================
// üìÅ Archivo: cotizacionGastoItem.ts
// üìå Ubicaci√≥n: src/lib/services/
// üîß Descripci√≥n: Funciones para manejar √≠tems de gasto dentro de CotizacionGasto
//
// üß† Uso: Usado en p√°ginas y componentes que gestionan √≠tems de gasto de cotizaci√≥n
// ‚úçÔ∏è Autor: Jes√∫s Artemio (mejorado por GYS AI Assistant üßô‚Äç‚ôÇÔ∏è)
// üìÖ √öltima actualizaci√≥n: 2025-06-03
// ===================================================

import type {
  CotizacionGastoItem,
  CotizacionGastoItemPayload,
  CotizacionGastoItemUpdatePayload,
} from '@/types'

const BASE_URL = '/api/cotizacion-gasto-item'

/**
 * ‚úÖ Obtener todos los √≠tems de gasto (filtrado opcional por gastoId)
 */
export async function getCotizacionGastoItems(gastoId?: string): Promise<CotizacionGastoItem[]> {
  try {
    const url = gastoId ? `${BASE_URL}?gastoId=${gastoId}` : BASE_URL
    const res = await fetch(url)
    if (!res.ok) {
      const { error } = await res.json()
      throw new Error(error || 'Error al obtener √≠tems de gasto')
    }
    return await res.json()
  } catch (error) {
    console.error('‚ùå Error getCotizacionGastoItems:', error)
    return []
  }
}

/**
 * ‚úÖ Obtener √≠tem de gasto por ID
 */
export async function getCotizacionGastoItemById(id: string): Promise<CotizacionGastoItem | null> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`)
    if (!res.ok) {
      const { error } = await res.json()
      throw new Error(error || 'Error al obtener √≠tem de gasto por ID')
    }
    return await res.json()
  } catch (error) {
    console.error('‚ùå Error getCotizacionGastoItemById:', error)
    return null
  }
}

/**
 * ‚úÖ Crear √≠tem de gasto
 */
export async function createCotizacionGastoItem(
  payload: CotizacionGastoItemPayload
): Promise<CotizacionGastoItem | null> {
  try {
    const res = await fetch(BASE_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) {
      const { error } = await res.json()
      throw new Error(error || 'Error al crear √≠tem de gasto')
    }
    return await res.json()
  } catch (error) {
    console.error('‚ùå Error createCotizacionGastoItem:', error)
    return null
  }
}

/**
 * ‚úÖ Actualizar √≠tem de gasto
 */
export async function updateCotizacionGastoItem(
  id: string,
  payload: CotizacionGastoItemUpdatePayload
): Promise<CotizacionGastoItem | null> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    if (!res.ok) {
      const { error } = await res.json()
      throw new Error(error || 'Error al actualizar √≠tem de gasto')
    }
    return await res.json()
  } catch (error) {
    console.error('‚ùå Error updateCotizacionGastoItem:', error)
    return null
  }
}

/**
 * ‚úÖ Eliminar √≠tem de gasto
 */
export async function deleteCotizacionGastoItem(
  id: string
): Promise<{ status: string; deletedId: string } | null> {
  try {
    const res = await fetch(`${BASE_URL}/${id}`, {
      method: 'DELETE',
    })
    if (!res.ok) {
      const { error } = await res.json()
      throw new Error(error || 'Error al eliminar √≠tem de gasto')
    }
    return await res.json()
  } catch (error) {
    console.error('‚ùå Error deleteCotizacionGastoItem:', error)
    return null
  }
}
