// ===================================================
// üìÅ Archivo: cotizacionServicio.ts
// üìå Ubicaci√≥n: src/lib/services/cotizacionServicio.ts
// üîß Descripci√≥n: Funciones para manejar CotizacionServicio desde el cliente
//
// üß† Uso: Consumido por formularios, listas y componentes relacionados a secciones de servicios
// ‚úçÔ∏è Autor: Jes√∫s Artemio
// üìÖ √öltima actualizaci√≥n: 2025-04-23
// ===================================================

import type { CotizacionServicio, CotizacionServicioPayload, CotizacionServicioUpdatePayload } from '@/types'

const BASE_URL = '/api/cotizacion-servicio'

// ‚úÖ Obtener todos los servicios de cotizaci√≥n (opcionalmente filtrado por cotizacionId)
export async function getCotizacionServicios(cotizacionId?: string): Promise<CotizacionServicio[]> {
  const url = cotizacionId ? `${BASE_URL}?cotizacionId=${cotizacionId}` : BASE_URL
  const res = await fetch(url)
  if (!res.ok) throw new Error('Error al obtener servicios de cotizaci√≥n')
  return res.json()
}

// ‚úÖ Obtener uno por ID (si lo necesitas)
export async function getCotizacionServicioById(id: string): Promise<CotizacionServicio> {
  const res = await fetch(`${BASE_URL}/${id}`)
  if (!res.ok) throw new Error('Error al obtener secci√≥n de servicio de cotizaci√≥n por ID')
  return res.json()
}

// ‚úÖ Crear nueva secci√≥n de servicios
export async function createCotizacionServicio(payload: CotizacionServicioPayload): Promise<CotizacionServicio> {
  const res = await fetch(BASE_URL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
  if (!res.ok) throw new Error('Error al crear secci√≥n de servicios (cotizaci√≥n)')
  return res.json()
}

// ‚úÖ Actualizar secci√≥n
export async function updateCotizacionServicio(id: string, payload: CotizacionServicioUpdatePayload): Promise<CotizacionServicio> {
  const res = await fetch(`${BASE_URL}/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
  if (!res.ok) throw new Error('Error al actualizar secci√≥n de servicios (cotizaci√≥n)')
  return res.json()
}

// ‚úÖ Eliminar secci√≥n
export async function deleteCotizacionServicio(id: string): Promise<void> {
  const res = await fetch(`${BASE_URL}/${id}`, {
    method: 'DELETE'
  })
  if (!res.ok) throw new Error('Error al eliminar secci√≥n de servicios (cotizaci√≥n)')
}
