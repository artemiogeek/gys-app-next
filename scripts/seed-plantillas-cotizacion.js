/**
 * üìä Script para poblar la base de datos con plantillas de exclusiones y condiciones
 * Basado en el documento proporcionado por el usuario
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  console.log('üå± Iniciando seed de plantillas de cotizaci√≥n...')

  try {
    // 1. Crear plantilla de exclusiones
    console.log('üìù Creando plantilla de exclusiones...')

    // Verificar si ya existe
    const existingExclusion = await prisma.plantillaExclusion.findFirst({
      where: { nombre: 'Exclusiones Generales' }
    })

    let plantillaExclusiones
    if (existingExclusion) {
      console.log('‚ö†Ô∏è  Plantilla de exclusiones ya existe, actualizando...')
      plantillaExclusiones = await prisma.plantillaExclusion.update({
        where: { id: existingExclusion.id },
        data: {
          descripcion: 'Exclusiones est√°ndar aplicables a la mayor√≠a de proyectos',
          categoria: 'general',
          activo: true,
          orden: 1,
          items: {
            deleteMany: {}, // Eliminar items existentes
            create: [
              {
                descripcion: 'Suministro de licencias para el correcto funcionamiento del sistema.',
                orden: 1,
                activo: true
              },
              {
                descripcion: 'Calibraci√≥n de instrumentos.',
                orden: 2,
                activo: true
              },
              {
                descripcion: 'Planos o diagramas el√©ctricos/mec√°nicos completos del sistema.',
                orden: 3,
                activo: true
              },
              {
                descripcion: 'Supervisi√≥n de las labores de montaje del filtro prensa.',
                orden: 4,
                activo: true
              },
              {
                descripcion: 'Suministro de m√°quinas virtuales.',
                orden: 5,
                activo: true
              }
            ]
          }
        },
        include: {
          items: true,
          _count: true
        }
      })
    } else {
      plantillaExclusiones = await prisma.plantillaExclusion.create({
        data: {
          nombre: 'Exclusiones Generales',
          descripcion: 'Exclusiones est√°ndar aplicables a la mayor√≠a de proyectos',
          categoria: 'general',
          activo: true,
          orden: 1,
          items: {
            create: [
              {
                descripcion: 'Suministro de licencias para el correcto funcionamiento del sistema.',
                orden: 1,
                activo: true
              },
              {
                descripcion: 'Calibraci√≥n de instrumentos.',
                orden: 2,
                activo: true
              },
              {
                descripcion: 'Planos o diagramas el√©ctricos/mec√°nicos completos del sistema.',
                orden: 3,
                activo: true
              },
              {
                descripcion: 'Supervisi√≥n de las labores de montaje del filtro prensa.',
                orden: 4,
                activo: true
              },
              {
                descripcion: 'Suministro de m√°quinas virtuales.',
                orden: 5,
                activo: true
              }
            ]
          }
        },
        include: {
          items: true,
          _count: true
        }
      })
    }

    console.log('‚úÖ Plantilla de exclusiones creada:', plantillaExclusiones.nombre)

    // 2. Crear plantillas de condiciones
    console.log('üìã Creando plantillas de condiciones...')

    // Condiciones Generales
    const existingGenerales = await prisma.plantillaCondicion.findFirst({
      where: { nombre: 'Condiciones Generales' }
    })

    let condicionesGenerales
    if (existingGenerales) {
      condicionesGenerales = await prisma.plantillaCondicion.update({
        where: { id: existingGenerales.id },
        data: {
          descripcion: 'Condiciones generales aplicables a todas las cotizaciones',
          categoria: 'general',
          tipo: 'comercial',
          activo: true,
          orden: 1,
          items: {
            deleteMany: {},
            create: [
              {
                descripcion: 'Los precios son v√°lidos seg√∫n el alcance t√©cnico ofertado y plazos estipulados. Cualquier modificaci√≥n requerida por el cliente ser√° objeto de actualizaci√≥n de oferta.',
                tipo: 'comercial',
                orden: 1,
                activo: true
              },
              {
                descripcion: 'El cliente debe enviar su orden de compra a ventas@gyscontrol.com. Si no recibe confirmaci√≥n, debe comunicarse con GYS.',
                tipo: 'comercial',
                orden: 2,
                activo: true
              }
            ]
          }
        },
        include: {
          items: true,
          _count: true
        }
      })
    } else {
      condicionesGenerales = await prisma.plantillaCondicion.create({
        data: {
          nombre: 'Condiciones Generales',
          descripcion: 'Condiciones generales aplicables a todas las cotizaciones',
          categoria: 'general',
          tipo: 'comercial',
          activo: true,
          orden: 1,
          items: {
            create: [
              {
                descripcion: 'Los precios son v√°lidos seg√∫n el alcance t√©cnico ofertado y plazos estipulados. Cualquier modificaci√≥n requerida por el cliente ser√° objeto de actualizaci√≥n de oferta.',
                tipo: 'comercial',
                orden: 1,
                activo: true
              },
              {
                descripcion: 'El cliente debe enviar su orden de compra a ventas@gyscontrol.com. Si no recibe confirmaci√≥n, debe comunicarse con GYS.',
                tipo: 'comercial',
                orden: 2,
                activo: true
              }
            ]
          }
        },
        include: {
          items: true,
          _count: true
        }
      })
    }

    // Funci√≥n helper para crear o actualizar plantilla de condici√≥n
    async function createOrUpdatePlantillaCondicion(nombre, descripcion, categoria, tipo, orden, items) {
      const existing = await prisma.plantillaCondicion.findFirst({
        where: { nombre }
      })

      if (existing) {
        return await prisma.plantillaCondicion.update({
          where: { id: existing.id },
          data: {
            descripcion,
            categoria,
            tipo,
            activo: true,
            orden,
            items: {
              deleteMany: {},
              create: items
            }
          },
          include: {
            items: true,
            _count: true
          }
        })
      } else {
        return await prisma.plantillaCondicion.create({
          data: {
            nombre,
            descripcion,
            categoria,
            tipo,
            activo: true,
            orden,
            items: {
              create: items
            }
          },
          include: {
            items: true,
            _count: true
          }
        })
      }
    }

    // Condiciones de Entregas
    const condicionesEntregas = await createOrUpdatePlantillaCondicion(
      'Condiciones de Entregas',
      'Condiciones espec√≠ficas para entregas y plazos',
      'entrega',
      'tecnica',
      2,
      [
        {
          descripcion: 'El plazo de entrega inicia una vez aclarado t√©cnica-comercialmente el pedido.',
          tipo: 'tecnica',
          orden: 1,
          activo: true
        },
        {
          descripcion: 'Las instrucciones de env√≠o deben darse con el pedido o firma del contrato.',
          tipo: 'tecnica',
          orden: 2,
          activo: true
        }
      ]
    )

    // Condiciones de Precios y Pagos
    const condicionesPrecios = await createOrUpdatePlantillaCondicion(
      'Condiciones de Precios y Pagos',
      'Condiciones relacionadas con precios, pagos e IGV',
      'precios',
      'comercial',
      3,
      [
        {
          descripcion: 'Los precios ofertados NO incluyen IGV.',
          tipo: 'comercial',
          orden: 1,
          activo: true
        },
        {
          descripcion: 'No se aceptar√° anulaci√≥n total o parcial de √≥rdenes de compra, salvo casos sustentados. Penalidades pueden alcanzar hasta el 100% del valor de la orden.',
          tipo: 'comercial',
          orden: 2,
          activo: true
        },
        {
          descripcion: 'Las entregas parciales ser√°n facturadas seg√∫n t√©rminos propuestos en la oferta.',
          tipo: 'comercial',
          orden: 3,
          activo: true
        }
      ]
    )

    // Condiciones de Garant√≠as
    const condicionesGarantias = await createOrUpdatePlantillaCondicion(
      'Condiciones de Garant√≠as',
      'Condiciones de garant√≠a para equipos y servicios',
      'garantias',
      'legal',
      4,
      [
        {
          descripcion: 'La garant√≠a de equipos es la otorgada por el fabricante desde la entrega. No cubre da√±os por mala manipulaci√≥n o usos no especificados.',
          tipo: 'legal',
          orden: 1,
          activo: true
        },
        {
          descripcion: 'Los servicios ejecutados tienen garant√≠a de funcionamiento seg√∫n la filosof√≠a de control. Cambios solicitados tendr√°n costo adicional.',
          tipo: 'legal',
          orden: 2,
          activo: true
        },
        {
          descripcion: 'Intervenciones posteriores se cobrar√°n como servicios adicionales, salvo que sea responsabilidad de GYS.',
          tipo: 'legal',
          orden: 3,
          activo: true
        }
      ]
    )

    // Obligaciones de GYS
    const obligacionesGys = await createOrUpdatePlantillaCondicion(
      'Obligaciones de GYS',
      'Obligaciones y responsabilidades de GYS Control Industrial',
      'obligaciones',
      'operativa',
      5,
      [
        {
          descripcion: 'Cumplir pol√≠ticas de seguridad y medio ambiente del cliente.',
          tipo: 'operativa',
          orden: 1,
          activo: true
        },
        {
          descripcion: 'Proveer EPP a su personal.',
          tipo: 'operativa',
          orden: 2,
          activo: true
        },
        {
          descripcion: 'Proveer movilizaci√≥n interna y externa al personal de campo durante la ejecuci√≥n.',
          tipo: 'operativa',
          orden: 3,
          activo: true
        }
      ]
    )

    // Obligaciones del Cliente
    const obligacionesCliente = await createOrUpdatePlantillaCondicion(
      'Obligaciones del Cliente',
      'Obligaciones y responsabilidades del cliente',
      'obligaciones',
      'comercial',
      6,
      [
        {
          descripcion: 'Nombrar un canal oficial de comunicaci√≥n con GYS.',
          tipo: 'comercial',
          orden: 1,
          activo: true
        },
        {
          descripcion: 'Facilitar informaci√≥n t√©cnica, manuales y especificaciones.',
          tipo: 'comercial',
          orden: 2,
          activo: true
        },
        {
          descripcion: 'Si GYS debe realizar labores adicionales no consideradas, se facturar√°n horas adicionales: $35.00/H-H para l√≠der y especialista. $25.00/H-H para personal t√©cnico, m√°s gastos generales.',
          tipo: 'comercial',
          orden: 3,
          activo: true
        }
      ]
    )

    console.log('‚úÖ Plantillas de condiciones creadas:')
    console.log('  -', condicionesGenerales.nombre, `(${condicionesGenerales._count.items} items)`)
    console.log('  -', condicionesEntregas.nombre, `(${condicionesEntregas._count.items} items)`)
    console.log('  -', condicionesPrecios.nombre, `(${condicionesPrecios._count.items} items)`)
    console.log('  -', condicionesGarantias.nombre, `(${condicionesGarantias._count.items} items)`)
    console.log('  -', obligacionesGys.nombre, `(${obligacionesGys._count.items} items)`)
    console.log('  -', obligacionesCliente.nombre, `(${obligacionesCliente._count.items} items)`)

    console.log('\nüéâ Seed completado exitosamente!')
    console.log('üìä Resumen:')
    console.log('  - 1 plantilla de exclusiones')
    console.log('  - 6 plantillas de condiciones')
    console.log('  - Total items:', plantillaExclusiones._count.items + condicionesGenerales._count.items + condicionesEntregas._count.items + condicionesPrecios._count.items + condicionesGarantias._count.items + obligacionesGys._count.items + obligacionesCliente._count.items)

  } catch (error) {
    console.error('‚ùå Error durante el seed:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

main()
  .catch((e) => {
    console.error('‚ùå Error fatal:', e)
    process.exit(1)
  })