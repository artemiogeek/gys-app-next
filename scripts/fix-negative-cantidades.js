// ===================================================
// üìÅ Archivo: fix-negative-cantidades.js
// üìå Descripci√≥n: Script para corregir valores negativos en cantidadPedida
// üìå Caracter√≠sticas: Identifica y corrige inconsistencias en la DB
// ‚úçÔ∏è Autor: Sistema GYS
// üìÖ Creado: 2025-01-27
// ===================================================

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function fixNegativeCantidades() {
  try {
    console.log('üîç Buscando registros con cantidadPedida negativa...')
    
    // ‚úÖ Find all records with negative cantidadPedida
    const negativeRecords = await prisma.listaEquipoItem.findMany({
      where: {
        cantidadPedida: {
          lt: 0
        }
      },
      include: {
        catalogoEquipo: {
          select: {
            codigo: true,
            descripcion: true
          }
        },
        lista: {
          select: {
            nombre: true
          }
        }
      }
    })

    console.log(`üìä Encontrados ${negativeRecords.length} registros con cantidadPedida negativa`)

    if (negativeRecords.length === 0) {
      console.log('‚úÖ No se encontraron registros con cantidadPedida negativa')
      return
    }

    // üì° Show details of negative records
    console.log('\nüìã Detalles de registros con cantidadPedida negativa:')
    negativeRecords.forEach((record, index) => {
      console.log(`${index + 1}. Lista: ${record.lista?.nombre || 'N/A'}`)
      console.log(`   Equipo: ${record.catalogoEquipo?.codigo || record.codigo || 'N/A'} - ${record.catalogoEquipo?.descripcion || record.descripcion || 'N/A'}`)
      console.log(`   cantidadPedida: ${record.cantidadPedida}`)
      console.log(`   cantidadEntregada: ${record.cantidadEntregada}`)
      console.log('   ---')
    })

    // üîÅ Ask for confirmation before fixing
    const readline = require('readline')
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })

    const answer = await new Promise((resolve) => {
      rl.question('\n¬øDeseas corregir estos registros estableciendo cantidadPedida = 0? (y/N): ', resolve)
    })
    rl.close()

    if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
      console.log('‚ùå Operaci√≥n cancelada')
      return
    }

    // ‚úÖ Fix negative values by setting them to 0
    const updateResult = await prisma.listaEquipoItem.updateMany({
      where: {
        cantidadPedida: {
          lt: 0
        }
      },
      data: {
        cantidadPedida: 0
      }
    })

    console.log(`\n‚úÖ Se corrigieron ${updateResult.count} registros`)
    console.log('üéâ Proceso completado exitosamente')

    // üì° Verify the fix
    const remainingNegative = await prisma.listaEquipoItem.count({
      where: {
        cantidadPedida: {
          lt: 0
        }
      }
    })

    console.log(`\nüîç Verificaci√≥n: ${remainingNegative} registros con cantidadPedida negativa restantes`)

  } catch (error) {
    console.error('‚ùå Error al corregir cantidades negativas:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// üöÄ Execute the fix
fixNegativeCantidades()
  .catch((error) => {
    console.error('‚ùå Error fatal:', error)
    process.exit(1)
  })